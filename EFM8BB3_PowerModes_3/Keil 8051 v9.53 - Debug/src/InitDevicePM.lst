C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICEPM
OBJECT MODULE PLACED IN .\src\InitDevicePM.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Binyami
                    -n\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\src\InitDevicePM.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNING
                    -LEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Binyamin\Simplicit
                    -yStudio\v4_workspace\EFM8BB3_PowerModes_3\inc;C:\Users\Binyamin\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\inc\c
                    -onfig;C:\Users\Binyamin\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\inc\graphics;C:/SiliconLabs/SimplicityStudio/
                    -v4/developer/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/EFM8B
                    -B3_SLSTK2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/
                    -inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:/S
                    -iliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs
                    -/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;C:/SiliconLabs/SimplicityStudio/v4
                    -/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Dev
                    -ice/EFM8BB3/inc) PRINT(.\src\InitDevicePM.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevicePM.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              WDT_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_1_enter_DefaultMode_from_RESET();
  29   1              PORTS_2_enter_DefaultMode_from_RESET();
  30   1              PORTS_3_enter_DefaultMode_from_RESET();
  31   1              PBCFG_0_enter_DefaultMode_from_RESET();
  32   1          ADC_0_enter_DefaultMode_from_RESET();
  33   1              CLOCK_0_enter_DefaultMode_from_RESET();
  34   1              TIMER01_0_enter_DefaultMode_from_RESET();
  35   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  36   1              PCACH_0_enter_DefaultMode_from_RESET();
  37   1              PCACH_1_enter_DefaultMode_from_RESET();
  38   1              PCACH_2_enter_DefaultMode_from_RESET();
  39   1              UART_0_enter_DefaultMode_from_RESET();
  40   1              TIMER16_3_enter_DefaultMode_from_RESET();
  41   1              PCA_0_enter_DefaultMode_from_RESET();
  42   1              SPI_0_enter_DefaultMode_from_RESET();
  43   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  44   1              // Restore the SFRPAGE
  45   1              SFRPAGE = SFRPAGE_save;
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 2   

  46   1              // [Config Calls]$
  47   1      
  48   1      }
  49          
  50          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  51   1              // $[WDTCN - Watchdog Timer Control]
  52   1              SFRPAGE = 0x00;
  53   1              //Disable Watchdog with key sequence
  54   1              WDTCN = 0xDE; //First key
  55   1              WDTCN = 0xAD; //Second key
  56   1              // [WDTCN - Watchdog Timer Control]$
  57   1      
  58   1      }
  59          
  60          
  61          
  62          extern void PCACH_0_enter_DefaultMode_from_RESET(void) { //space invaders
  63   1              // $[PCA0 Settings Save]
  64   1              // Select Capture/Compare register)
  65   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
  66   1              // [PCA0 Settings Save]$
  67   1      
  68   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
  69   1              /*
  70   1               // CAPN (Channel 0 Capture Negative Function Enable) = DISABLED (Disable
  71   1               //     negative edge capture.)
  72   1               // ECCF (Channel 0 Capture/Compare Flag Interrupt Enable) = DISABLED
  73   1               //     (Disable CCF0 interrupts.)
  74   1               // MAT (Channel 0 Match Function Enable) = DISABLED (Disable match
  75   1               //     function.)
  76   1               // PWM16 (Channel 0 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
  77   1               //     11-bit PWM selected.)
  78   1               // CAPP (Channel 0 Capture Positive Function Enable) = DISABLED (Disable
  79   1               //     positive edge capture.)
  80   1               // ECOM (Channel 0 Comparator Function Enable) = ENABLED (Enable
  81   1               //     comparator function.)
  82   1               // PWM (Channel 0 Pulse Width Modulation Mode Enable) = ENABLED (Enable
  83   1               //     PWM function.)
  84   1               // TOG (Channel 0 Toggle Function Enable) = DISABLED (Disable toggle
  85   1               //     function.)
  86   1               */
  87   1              PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__DISABLED
  88   1                              | PCA0CPM0_MAT__DISABLED | PCA0CPM0_PWM16__8_BIT
  89   1                              | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED
  90   1                              | PCA0CPM0_PWM__ENABLED | PCA0CPM0_TOG__DISABLED;
  91   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
  92   1      
  93   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
  94   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
  95   1      
  96   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
  97   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
  98   1      
  99   1              // $[Auto-reload]
 100   1              // [Auto-reload]$
 101   1      
 102   1              // $[PCA0 Settings Restore]
 103   1              // [PCA0 Settings Restore]$
 104   1      
 105   1      }
 106          
 107          //================================================================================
 108          // PCACH_1_enter_DefaultMode_from_RESET
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 3   

 109          //================================================================================
 110          extern void PCACH_1_enter_DefaultMode_from_RESET(void) { //space invaders
 111   1              // $[PCA0 Settings Save]
 112   1              // Select Capture/Compare register)
 113   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 114   1              // [PCA0 Settings Save]$
 115   1      
 116   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
 117   1              /*
 118   1               // CAPN (Channel 1 Capture Negative Function Enable) = DISABLED (Disable
 119   1               //     negative edge capture.)
 120   1               // ECCF (Channel 1 Capture/Compare Flag Interrupt Enable) = DISABLED
 121   1               //     (Disable CCF1 interrupts.)
 122   1               // MAT (Channel 1 Match Function Enable) = DISABLED (Disable match
 123   1               //     function.)
 124   1               // PWM16 (Channel 1 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
 125   1               //     11-bit PWM selected.)
 126   1               // CAPP (Channel 1 Capture Positive Function Enable) = DISABLED (Disable
 127   1               //     positive edge capture.)
 128   1               // ECOM (Channel 1 Comparator Function Enable) = ENABLED (Enable
 129   1               //     comparator function.)
 130   1               // PWM (Channel 1 Pulse Width Modulation Mode Enable) = ENABLED (Enable
 131   1               //     PWM function.)
 132   1               // TOG (Channel 1 Toggle Function Enable) = DISABLED (Disable toggle
 133   1               //     function.)
 134   1               */
 135   1              PCA0CPM1 = PCA0CPM1_CAPN__DISABLED | PCA0CPM1_ECCF__DISABLED
 136   1                              | PCA0CPM1_MAT__ENABLED | PCA0CPM1_PWM16__8_BIT
 137   1                              | PCA0CPM1_CAPP__DISABLED | PCA0CPM1_ECOM__ENABLED
 138   1                              | PCA0CPM1_PWM__ENABLED | PCA0CPM1_TOG__DISABLED;
 139   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
 140   1      
 141   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
 142   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
 143   1      
 144   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
 145   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
 146   1      
 147   1              // $[Auto-reload]
 148   1              // [Auto-reload]$
 149   1      
 150   1              // $[PCA0 Settings Restore]
 151   1              // [PCA0 Settings Restore]$
 152   1      
 153   1      }
 154          
 155          //================================================================================
 156          // PCACH_2_enter_DefaultMode_from_RESET
 157          //================================================================================
 158          extern void PCACH_2_enter_DefaultMode_from_RESET(void) { //taken from space invaders
 159   1              // $[PCA0 Settings Save]
 160   1              // Select Capture/Compare register)
 161   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 162   1              // [PCA0 Settings Save]$
 163   1      
 164   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
 165   1              /*
 166   1               // CAPN (Channel 2 Capture Negative Function Enable) = DISABLED (Disable
 167   1               //     negative edge capture.)
 168   1               // ECCF (Channel 2 Capture/Compare Flag Interrupt Enable) = DISABLED
 169   1               //     (Disable CCF2 interrupts.)
 170   1               // MAT (Channel 2 Match Function Enable) = DISABLED (Disable match
 171   1               //     function.)
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 4   

 172   1               // PWM16 (Channel 2 16-bit Pulse Width Modulation Enable) = 8_BIT (8 to
 173   1               //     11-bit PWM selected.)
 174   1               // CAPP (Channel 2 Capture Positive Function Enable) = DISABLED (Disable
 175   1               //     positive edge capture.)
 176   1               // ECOM (Channel 2 Comparator Function Enable) = ENABLED (Enable
 177   1               //     comparator function.)
 178   1               // PWM (Channel 2 Pulse Width Modulation Mode Enable) = ENABLED (Enable
 179   1               //     PWM function.)
 180   1               // TOG (Channel 2 Toggle Function Enable) = DISABLED (Disable toggle
 181   1               //     function.)
 182   1               */
 183   1              PCA0CPM2 = PCA0CPM2_CAPN__DISABLED | PCA0CPM2_ECCF__DISABLED
 184   1                              | PCA0CPM2_MAT__ENABLED | PCA0CPM2_PWM16__8_BIT
 185   1                              | PCA0CPM2_CAPP__DISABLED | PCA0CPM2_ECOM__ENABLED
 186   1                              | PCA0CPM2_PWM__ENABLED | PCA0CPM2_TOG__DISABLED;
 187   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
 188   1      
 189   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 190   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 191   1      
 192   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 193   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 194   1      
 195   1              // $[Auto-reload]
 196   1              // [Auto-reload]$
 197   1      
 198   1              // $[PCA0 Settings Restore]
 199   1              // [PCA0 Settings Restore]$
 200   1      
 201   1      }
 202          
 203          
 204          extern void PCA_0_enter_DefaultMode_from_RESET(void) {  //taken from Space Invaders
 205   1              // $[PCA Off]
 206   1              PCA0CN0_CR = PCA0CN0_CR__STOP;
 207   1              // [PCA Off]$
 208   1      
 209   1              // $[PCA0MD - PCA Mode]
 210   1              // [PCA0MD - PCA Mode]$
 211   1      
 212   1              // $[PCA0CENT - PCA Center Alignment Enable]
 213   1              // [PCA0CENT - PCA Center Alignment Enable]$
 214   1      
 215   1              // $[PCA0CLR - PCA Comparator Clear Control]
 216   1              // [PCA0CLR - PCA Comparator Clear Control]$
 217   1      
 218   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 219   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 220   1      
 221   1              // $[PCA0H - PCA Counter/Timer High Byte]
 222   1              // [PCA0H - PCA Counter/Timer High Byte]$
 223   1      
 224   1              // $[PCA0POL - PCA Output Polarity]
 225   1              // [PCA0POL - PCA Output Polarity]$
 226   1      
 227   1              // $[PCA0PWM - PCA PWM Configuration]
 228   1              // [PCA0PWM - PCA PWM Configuration]$
 229   1      
 230   1              // $[PCA On]
 231   1              PCA0CN0_CR = PCA0CN0_CR__RUN;
 232   1              // [PCA On]$
 233   1      
 234   1      }
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 5   

 235          
 236          
 237          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 238   1              // $[Timer Initialization]
 239   1              //Save Timer Configuration
 240   1              uint8_t TCON_save;
 241   1              TCON_save = TCON;
 242   1              //Stop Timers
 243   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 244   1      
 245   1              // [Timer Initialization]$
 246   1      
 247   1              // $[TH0 - Timer 0 High Byte]
 248   1              // [TH0 - Timer 0 High Byte]$
 249   1              TH0 = (0x01 << TH0_TH0__SHIFT);
 250   1              // $[TL0 - Timer 0 Low Byte]
 251   1              // [TL0 - Timer 0 Low Byte]$
 252   1      
 253   1              // $[TH1 - Timer 1 High Byte]
 254   1              /*
 255   1               // TH1 (Timer 1 High Byte) = 0x96
 256   1               */
 257   1              TH1 = (0x96 << TH1_TH1__SHIFT);
 258   1              // [TH1 - Timer 1 High Byte]$
 259   1      
 260   1              // $[TL1 - Timer 1 Low Byte]
 261   1              // [TL1 - Timer 1 Low Byte]$
 262   1      
 263   1              // $[Timer Restoration]
 264   1              //Restore Timer Configuration
 265   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 266   1      
 267   1              // [Timer Restoration]$
 268   1      
 269   1      }
 270          
 271          extern void UART_0_enter_DefaultMode_from_RESET() {
 272   1              // $[SCON0 - UART0 Serial Port Control]
 273   1              /*
 274   1               // REN (Receive Enable) = RECEIVE_ENABLED (UART0 reception enabled.)
 275   1               */
 276   1              SCON0 |= SCON0_REN__RECEIVE_ENABLED;
 277   1              // [SCON0 - UART0 Serial Port Control]$
 278   1      
 279   1      }
 280          
 281          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void){
 282   1              // $[CKCON0 - Clock Control 0]
 283   1              /*
 284   1               // SCA (Timer 0/1 Prescale) = SYSCLK_DIV_12 (System clock divided by 12.)
 285   1               // T0M (Timer 0 Clock Select) = PRESCALE (Counter/Timer 0 uses the clock
 286   1               //     defined by the prescale field, SCA.)
 287   1               // T2MH (Timer 2 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 high
 288   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 289   1               // T2ML (Timer 2 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 low
 290   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 291   1               // T3MH (Timer 3 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 high
 292   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 293   1               // T3ML (Timer 3 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 low
 294   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 295   1               // T1M (Timer 1 Clock Select) = SYSCLK (Timer 1 uses the system clock.)
 296   1               */
 297   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 6   

 298   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 299   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 300   1                              | CKCON0_T1M__SYSCLK;
 301   1              // [CKCON0 - Clock Control 0]$
 302   1      
 303   1              // $[CKCON1 - Clock Control 1]
 304   1              // [CKCON1 - Clock Control 1]$
 305   1      
 306   1              // $[TMOD - Timer 0/1 Mode]
 307   1              /*
 308   1               // T0M (Timer 0 Mode Select) = MODE0 (Mode 0, 13-bit Counter/Timer)
 309   1               // T1M (Timer 1 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 310   1               //     Auto-Reload)
 311   1               // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 312   1               //     on the clock defined by T0M in the CKCON0 register.)
 313   1               // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 314   1               //     irrespective of INT0 logic level.)
 315   1               // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
 316   1               //     on the clock defined by T1M in the CKCON0 register.)
 317   1               // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 318   1               //     irrespective of INT1 logic level.)
 319   1               */
 320   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 321   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 322   1              // [TMOD - Timer 0/1 Mode]$
 323   1      
 324   1              // $[TCON - Timer 0/1 Control]
 325   1              /*
 326   1               // TR1 (Timer 1 Run Control) = RUN (Start Timer 1 running.)
 327   1               */
 328   1              TCON |= TCON_TR1__RUN;
 329   1              // [TCON - Timer 0/1 Control]$
 330   1      
 331   1      }
 332          
 333          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 334   1              // $[HFOSC1 Setup]
 335   1              // [HFOSC1 Setup]$
 336   1      
 337   1              // $[CLKSEL - Clock Select]
 338   1              /*
 339   1               // CLKSL (Clock Source Select) = HFOSC0 (Clock derived from the Internal
 340   1               //     High Frequency Oscillator 0.)
 341   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 342   1               //     selected clock source divided by 1.)
 343   1               */
 344   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 345   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 346   1                      ;
 347   1              // [CLKSEL - Clock Select]$
 348   1      
 349   1      }
 350          
 351          extern void SPI_0_enter_DefaultMode_from_RESET(void) {
 352   1              // $[SPI0CKR - SPI0 Clock Rate]
 353   1              /*
 354   1               // SPI0CKR (SPI0 Clock Rate) = 0x0B
 355   1               */
 356   1              SPI0CKR = (0x0B << SPI0CKR_SPI0CKR__SHIFT);
 357   1              // [SPI0CKR - SPI0 Clock Rate]$
 358   1      
 359   1              // $[SPI0CFG - SPI0 Configuration]
 360   1              /*
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 7   

 361   1               // MSTEN (Master Mode Enable) = MASTER_ENABLED (Enable master mode.
 362   1               //     Operate as a master.)
 363   1               */
 364   1              SPI0CFG |= SPI0CFG_MSTEN__MASTER_ENABLED;
 365   1              // [SPI0CFG - SPI0 Configuration]$
 366   1      
 367   1              // $[SPI0PCF - SPI0 Pin Configuration]
 368   1              // [SPI0PCF - SPI0 Pin Configuration]$
 369   1      
 370   1              // $[SPI0CN0 - SPI0 Control]
 371   1              /*
 372   1               // SPIEN (SPI0 Enable) = ENABLED (Enable the SPI module.)
 373   1               // NSSMD (Slave Select Mode) = 3_WIRE (3-Wire Slave or 3-Wire Master
 374   1               //     Mode. NSS signal is not routed to a port pin.)
 375   1               */
 376   1              SPI0CN0 &= ~SPI0CN0_NSSMD__FMASK;
 377   1              SPI0CN0 |= SPI0CN0_SPIEN__ENABLED;
 378   1              // [SPI0CN0 - SPI0 Control]$
 379   1      
 380   1      }
 381          
 382          
 383          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 384   1              // $[ADC0CN2 - ADC0 Control 2]
 385   1              /*
 386   1               // ADCM (Start of Conversion Mode Select) = TIMER0 (ADC0 conversion
 387   1               //     initiated on overflow of Timer 0.)
 388   1               // PACEN (Preserve Accumulator Enable) = PAC_DISABLED (The ADC
 389   1               //     accumulator is over-written with the results of any conversion (or set
 390   1               //     of conversions as specified by ADRPT).)
 391   1               */
 392   1              ADC0CN2 = ADC0CN2_ADCM__TIMER0 | ADC0CN2_PACEN__PAC_ENABLED;
 393   1              // [ADC0CN2 - ADC0 Control 2]$
 394   1      
 395   1              // $[ADC0CN1 - ADC0 Control 1]
 396   1              /*
 397   1               // ADBITS (Resolution Control) = 10_BIT (ADC0 operates in 10-bit mode.)
 398   1               // ADSJST (Accumulator Shift and Justify) = RIGHT_NO_SHIFT (Right
 399   1               //     justified. No shifting applied.)
 400   1               // ADRPT (Repeat Count) = ACC_1 (Perform and Accumulate 1 conversion.)
 401   1               */
 402   1              ADC0CN1 = ADC0CN1_ADBITS__10_BIT | ADC0CN1_ADSJST__RIGHT_NO_SHIFT
 403   1                              | ADC0CN1_ADRPT__ACC_1;
 404   1              // [ADC0CN1 - ADC0 Control 1]$
 405   1      
 406   1              // $[ADC0MX - ADC0 Multiplexer Selection]
 407   1              /*
 408   1               // ADC0MX (AMUX0 Positive Input Selection) = ADC0P13 (Select ADC0.13.)
 409   1               */
 410   1              ADC0MX = ADC0MX_ADC0MX__ADC0P13;
 411   1              // [ADC0MX - ADC0 Multiplexer Selection]$
 412   1      
 413   1              // $[ADC0CF2 - ADC0 Power Control]
 414   1              /*
 415   1               // GNDSL (Analog Ground Reference) = GND_PIN (The ADC0 ground reference
 416   1               //     is the GND pin.)
 417   1               // REFSL (Voltage Reference Select) = VDD_PIN (The ADC0 voltage reference
 418   1               //     is the VDD pin.)
 419   1               // ADPWR (Power Up Delay Time) = 0x1F
 420   1               */
 421   1              ADC0CF2 = ADC0CF2_GNDSL__GND_PIN | ADC0CF2_REFSL__VDD_PIN
 422   1                              | (0x1F << ADC0CF2_ADPWR__SHIFT);
 423   1              // [ADC0CF2 - ADC0 Power Control]$
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 8   

 424   1      
 425   1              // $[ADC0CF0 - ADC0 Configuration]
 426   1              /*
 427   1               // ADCLKSEL (ADC Clock Select) = SYSCLK (ADCCLK = SYSCLK.)
 428   1               // ADSC (SAR Clock Divider) = 0x01
 429   1               */
 430   1              ADC0CF0 = ADC0CF0_ADCLKSEL__SYSCLK | (0x01 << ADC0CF0_ADSC__SHIFT);
 431   1              // [ADC0CF0 - ADC0 Configuration]$
 432   1      
 433   1              // $[ADC0CF1 - ADC0 Configuration]
 434   1              /*
 435   1               // ADLPM (Low Power Mode Enable) = LP_DISABLED (Disable low power
 436   1               //     mode.)
 437   1               // ADTK (Conversion Tracking Time) = 0x01
 438   1               */
 439   1              ADC0CF1 = ADC0CF1_ADLPM__LP_ENABLED | (0x01 << ADC0CF1_ADTK__SHIFT);
 440   1              // [ADC0CF1 - ADC0 Configuration]$
 441   1      
 442   1              // $[ADC0ASAL - ADC0 Autoscan Start Address Low Byte]
 443   1              // [ADC0ASAL - ADC0 Autoscan Start Address Low Byte]$
 444   1      
 445   1              // $[ADC0GTH - ADC0 Greater-Than High Byte]
 446   1              // [ADC0GTH - ADC0 Greater-Than High Byte]$
 447   1      
 448   1              // $[ADC0GTL - ADC0 Greater-Than Low Byte]
 449   1              // [ADC0GTL - ADC0 Greater-Than Low Byte]$
 450   1      
 451   1              // $[ADC0LTH - ADC0 Less-Than High Byte]
 452   1              // [ADC0LTH - ADC0 Less-Than High Byte]$
 453   1      
 454   1              // $[ADC0LTL - ADC0 Less-Than Low Byte]
 455   1              // [ADC0LTL - ADC0 Less-Than Low Byte]$
 456   1      
 457   1              // $[ADC0ASCF - ADC0 Autoscan Configuration]
 458   1              // [ADC0ASCF - ADC0 Autoscan Configuration]$
 459   1      
 460   1              // $[ADC0CN0 - ADC0 Control 0]
 461   1              /*
 462   1               // ADEN (ADC Enable) = ENABLED (Enable ADC0 (active and ready for data
 463   1               //     conversions).)
 464   1               */
 465   1              ADC0CN0 |= ADC0CN0_ADEN__ENABLED;
 466   1              // [ADC0CN0 - ADC0 Control 0]$
 467   1      
 468   1      }
 469          
 470          
 471          
 472          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 473   1              // $[EIE1 - Extended Interrupt Enable 1]
 474   1              /*
 475   1               // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 476   1               //     ADC0 Conversion Complete interrupt.)
 477   1               // EWADC0 (ADC0 Window Comparison Interrupt Enable) = DISABLED (Disable
 478   1               //     ADC0 Window Comparison interrupt.)
 479   1               // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 480   1               //     interrupts.)
 481   1               // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 482   1               //     interrupts.)
 483   1               // EMAT (Port Match Interrupts Enable) = ENABLED (Enable interrupt
 484   1               //     requests generated by a Port Match.)
 485   1               // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 486   1               //     (Disable all PCA0 interrupts.)
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 9   

 487   1               // ESMB0 (SMBus (SMB0) Interrupt Enable) = DISABLED (Disable all SMB0
 488   1               //     interrupts.)
 489   1               // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 490   1               //     generated by the TF3L or TF3H flags.)
 491   1               */
 492   1              EIE1 = EIE1_EADC0__ENABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__ENABLED
 493   1                              | EIE1_ECP1__ENABLED | EIE1_EMAT__ENABLED | EIE1_EPCA0__DISABLED
 494   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED;
 495   1              // [EIE1 - Extended Interrupt Enable 1]$
 496   1      
 497   1              // $[EIE2 - Extended Interrupt Enable 2]
 498   1              // [EIE2 - Extended Interrupt Enable 2]$
 499   1      
 500   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 501   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 502   1      
 503   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 504   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 505   1      
 506   1              // $[EIP2 - Extended Interrupt Priority 2]
 507   1              // [EIP2 - Extended Interrupt Priority 2]$
 508   1      
 509   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 510   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 511   1      
 512   1              // $[IE - Interrupt Enable]
 513   1              /*
 514   1               // EA (All Interrupts Enable) = DISABLED (Disable all interrupt sources.)
 515   1               // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 516   1               //     interrupt 0.)
 517   1               // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 518   1               //     interrupt 1.)
 519   1               // ESPI0 (SPI0 Interrupt Enable) = ENABLED (Enable interrupt requests
 520   1               //     generated by SPI0.)
 521   1               // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 522   1               //     interrupt.)
 523   1               // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 524   1               //     interrupt.)
 525   1               // ET2 (Timer 2 Interrupt Enable) = ENABLED (Enable interrupt requests
 526   1               //     generated by the TF2L or TF2H flags.)
 527   1               // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 528   1               */
 529   1              IE = IE_EA__DISABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 530   1                              | IE_ESPI0__ENABLED | IE_ET0__ENABLED | IE_ET1__DISABLED
 531   1                              | IE_ET2__ENABLED | IE_ES0__ENABLED;
 532   1              // [IE - Interrupt Enable]$
 533   1      
 534   1              // $[IP - Interrupt Priority]
 535   1              // [IP - Interrupt Priority]$
 536   1      
 537   1              // $[IPH - Interrupt Priority High]
 538   1              // [IPH - Interrupt Priority High]$
 539   1      
 540   1      }
 541          
 542          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 543   1              // $[XBR2 - Port I/O Crossbar 2]
 544   1              /*
 545   1               // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 546   1               //     Pullups enabled (except for Ports whose I/O are configured for analog
 547   1               //     mode).)
 548   1               // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 549   1               // URT1E (UART1 I/O Enable) = DISABLED (UART1 I/O unavailable at Port
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 10  

 550   1               //     pin.)
 551   1               // URT1RTSE (UART1 RTS Output Enable) = DISABLED (UART1 RTS1 unavailable
 552   1               //     at Port pin.)
 553   1               // URT1CTSE (UART1 CTS Input Enable) = DISABLED (UART1 CTS1 unavailable
 554   1               //     at Port pin.)
 555   1               */
 556   1              SFRPAGE = 0x00;
 557   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 558   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 559   1                              | XBR2_URT1CTSE__DISABLED;
 560   1              // [XBR2 - Port I/O Crossbar 2]$
 561   1      
 562   1              // $[PRTDRV - Port Drive Strength]
 563   1              // [PRTDRV - Port Drive Strength]$
 564   1      
 565   1              // $[XBR0 - Port I/O Crossbar 0]
 566   1              /*
 567   1               // URT0E (UART0 I/O Enable) = DISABLED (UART0 I/O unavailable at Port
 568   1               //     pin.)
 569   1               // SPI0E (SPI I/O Enable) = ENABLED (SPI I/O routed to Port pins. The SPI
 570   1               //     can be assigned either 3 or 4 GPIO pins.)
 571   1               // SMB0E (SMB0 I/O Enable) = DISABLED (SMBus 0 I/O unavailable at Port
 572   1               //     pins.)
 573   1               // CP0E (Comparator0 Output Enable) = DISABLED (CP0 unavailable at Port
 574   1               //     pin.)
 575   1               // CP0AE (Comparator0 Asynchronous Output Enable) = DISABLED
 576   1               //     (Asynchronous CP0 unavailable at Port pin.)
 577   1               // CP1E (Comparator1 Output Enable) = DISABLED (CP1 unavailable at Port
 578   1               //     pin.)
 579   1               // CP1AE (Comparator1 Asynchronous Output Enable) = DISABLED
 580   1               //     (Asynchronous CP1 unavailable at Port pin.)
 581   1               // SYSCKE (SYSCLK Output Enable) = DISABLED (SYSCLK unavailable at Port
 582   1               //     pin.)
 583   1               */
 584   1              XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__ENABLED | XBR0_SMB0E__DISABLED
 585   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 586   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 587   1              // [XBR0 - Port I/O Crossbar 0]$
 588   1      
 589   1              // $[XBR1 - Port I/O Crossbar 1]
 590   1              // [XBR1 - Port I/O Crossbar 1]$
 591   1      
 592   1      
 593   1              XBR1 = XBR1_PCA0ME__CEX0_TO_CEX2 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
 594   1                                      | XBR1_T1E__DISABLED | XBR1_T2E__DISABLED; // XBR1 register from Space Invaders
 595   1      }
 596          
 597          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 598   1              // $[Timer Initialization]
 599   1              // Save Timer Configuration
 600   1              uint8_t TMR3CN0_TR3_save;
 601   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 602   1              // Stop Timer
 603   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 604   1              // [Timer Initialization]$
 605   1      
 606   1              // $[TMR3CN1 - Timer 3 Control 1]
 607   1              // [TMR3CN1 - Timer 3 Control 1]$
 608   1      
 609   1              // $[TMR3CN0 - Timer 3 Control]
 610   1              // [TMR3CN0 - Timer 3 Control]$
 611   1      
 612   1              // $[TMR3H - Timer 3 High Byte]
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 11  

 613   1              /*
 614   1               // TMR3H (Timer 3 High Byte) = 0xF8
 615   1               */
 616   1              TMR3H = (0xF8 << TMR3H_TMR3H__SHIFT);
 617   1              // [TMR3H - Timer 3 High Byte]$
 618   1      
 619   1              // $[TMR3L - Timer 3 Low Byte]
 620   1              /*
 621   1               // TMR3L (Timer 3 Low Byte) = 0x06
 622   1               */
 623   1              TMR3L = (0x06 << TMR3L_TMR3L__SHIFT);
 624   1              // [TMR3L - Timer 3 Low Byte]$
 625   1      
 626   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 627   1              /*
 628   1               // TMR3RLH (Timer 3 Reload High Byte) = 0xF8
 629   1               */
 630   1              TMR3RLH = (0xF8 << TMR3RLH_TMR3RLH__SHIFT);
 631   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 632   1      
 633   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 634   1              /*
 635   1               // TMR3RLL (Timer 3 Reload Low Byte) = 0x06
 636   1               */
 637   1              TMR3RLL = (0x06 << TMR3RLL_TMR3RLL__SHIFT);
 638   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 639   1      
 640   1              // $[TMR3CN0]
 641   1              /*
 642   1               // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 643   1               */
 644   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 645   1              // [TMR3CN0]$
 646   1      
 647   1              // $[Timer Restoration]
 648   1              // Restore Timer Configuration
 649   1              TMR3CN0 |= TMR3CN0_TR3_save;
 650   1              // [Timer Restoration]$
 651   1      
 652   1      }
 653          
 654          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 655   1      
 656   1              P0 = P0_B0__HIGH | P0_B1__HIGH | P0_B2__HIGH | P0_B3__HIGH | P0_B4__HIGH
 657   1                              | P0_B5__HIGH | P0_B6__HIGH | P0_B7__HIGH;
 658   1      
 659   1              // $[P0 - Port 0 Pin Latch]
 660   1              // [P0 - Port 0 Pin Latch]$
 661   1      
 662   1              // $[P0MDOUT - Port 0 Output Mode]
 663   1              /*
 664   1               // B0 (Port 0 Bit 0 Output Mode) = OPEN_DRAIN (P0.0 output is open-
 665   1               //     drain.)
 666   1               // B1 (Port 0 Bit 1 Output Mode) = OPEN_DRAIN (P0.1 output is open-
 667   1               //     drain.)
 668   1               // B2 (Port 0 Bit 2 Output Mode) = OPEN_DRAIN (P0.2 output is open-
 669   1               //     drain.)
 670   1               // B3 (Port 0 Bit 3 Output Mode) = OPEN_DRAIN (P0.3 output is open-
 671   1               //     drain.)
 672   1               // B4 (Port 0 Bit 4 Output Mode) = OPEN_DRAIN (P0.4 output is open-
 673   1               //     drain.)
 674   1               // B5 (Port 0 Bit 5 Output Mode) = OPEN_DRAIN (P0.5 output is open-
 675   1               //     drain.)
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 12  

 676   1               // B6 (Port 0 Bit 6 Output Mode) = PUSH_PULL (P0.6 output is push-pull.)
 677   1               // B7 (Port 0 Bit 7 Output Mode) = OPEN_DRAIN (P0.7 output is open-
 678   1               //     drain.)
 679   1               */
 680   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__PUSH_PULL
 681   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
 682   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__PUSH_PULL
 683   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__OPEN_DRAIN;
 684   1              // [P0MDOUT - Port 0 Output Mode]$
 685   1      
 686   1      
 687   1              P0MDIN = P0MDIN_B0__DIGITAL | P0MDIN_B1__DIGITAL | P0MDIN_B2__DIGITAL
 688   1                                      | P0MDIN_B3__DIGITAL | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
 689   1                                      | P0MDIN_B6__DIGITAL | P0MDIN_B7__DIGITAL;
 690   1              // $[P0MDIN - Port 0 Input Mode]
 691   1              // [P0MDIN - Port 0 Input Mode]$
 692   1      
 693   1              // $[P0SKIP - Port 0 Skip]
 694   1              /*
 695   1               // B0 (Port 0 Bit 0 Skip) = SKIPPED (P0.0 pin is skipped by the
 696   1               //     crossbar.)
 697   1               // B1 (Port 0 Bit 1 Skip) = SKIPPED (P0.1 pin is skipped by the
 698   1               //     crossbar.)
 699   1               // B2 (Port 0 Bit 2 Skip) = SKIPPED (P0.2 pin is skipped by the
 700   1               //     crossbar.)
 701   1               // B3 (Port 0 Bit 3 Skip) = SKIPPED (P0.3 pin is skipped by the
 702   1               //     crossbar.)
 703   1               // B4 (Port 0 Bit 4 Skip) = SKIPPED (P0.4 pin is skipped by the
 704   1               //     crossbar.)
 705   1               // B5 (Port 0 Bit 5 Skip) = SKIPPED (P0.5 pin is skipped by the
 706   1               //     crossbar.)
 707   1               // B6 (Port 0 Bit 6 Skip) = NOT_SKIPPED (P0.6 pin is not skipped by the
 708   1               //     crossbar.)
 709   1               // B7 (Port 0 Bit 7 Skip) = NOT_SKIPPED (P0.7 pin is not skipped by the
 710   1               //     crossbar.)
 711   1               */
 712   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
 713   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__NOT_SKIPPED | P0SKIP_B5__NOT_SKIPPED
 714   1                              | P0SKIP_B6__NOT_SKIPPED | P0SKIP_B7__NOT_SKIPPED;
 715   1              // [P0SKIP - Port 0 Skip]$
 716   1      
 717   1              // $[P0MASK - Port 0 Mask]
 718   1              /*
 719   1               // B0 (Port 0 Bit 0 Mask Value) = IGNORED (P0.0 pin logic value is
 720   1               //     ignored and will not cause a port mismatch event.)
 721   1               // B1 (Port 0 Bit 1 Mask Value) = IGNORED (P0.1 pin logic value is
 722   1               //     ignored and will not cause a port mismatch event.)
 723   1               // B2 (Port 0 Bit 2 Mask Value) = COMPARED (P0.2 pin logic value is
 724   1               //     compared to P0MAT.2.)
 725   1               // B3 (Port 0 Bit 3 Mask Value) = IGNORED (P0.3 pin logic value is
 726   1               //     ignored and will not cause a port mismatch event.)
 727   1               // B4 (Port 0 Bit 4 Mask Value) = IGNORED (P0.4 pin logic value is
 728   1               //     ignored and will not cause a port mismatch event.)
 729   1               // B5 (Port 0 Bit 5 Mask Value) = IGNORED (P0.5 pin logic value is
 730   1               //     ignored and will not cause a port mismatch event.)
 731   1               // B6 (Port 0 Bit 6 Mask Value) = IGNORED (P0.6 pin logic value is
 732   1               //     ignored and will not cause a port mismatch event.)
 733   1               // B7 (Port 0 Bit 7 Mask Value) = IGNORED (P0.7 pin logic value is
 734   1               //     ignored and will not cause a port mismatch event.)
 735   1               */
 736   1              P0MASK = P0MASK_B0__IGNORED | P0MASK_B1__IGNORED | P0MASK_B2__COMPARED
 737   1                              | P0MASK_B3__IGNORED | P0MASK_B4__IGNORED | P0MASK_B5__IGNORED
 738   1                              | P0MASK_B6__IGNORED | P0MASK_B7__IGNORED;
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 13  

 739   1              // [P0MASK - Port 0 Mask]$
 740   1      
 741   1              // $[P0MAT - Port 0 Match]
 742   1              // [P0MAT - Port 0 Match]$
 743   1      
 744   1      }
 745          
 746          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 747   1              // $[P1 - Port 1 Pin Latch]
 748   1              // [P1 - Port 1 Pin Latch]$
 749   1      
 750   1              P1 = P1_B0__HIGH | P1_B1__HIGH | P1_B2__HIGH | P1_B3__HIGH | P1_B4__HIGH
 751   1                              | P1_B5__HIGH | P1_B6__HIGH | P1_B7__HIGH;
 752   1      
 753   1              // $[P1MDOUT - Port 1 Output Mode]
 754   1              /*
 755   1               // B0 (Port 1 Bit 0 Output Mode) = PUSH_PULL (P1.0 output is push-pull.)
 756   1               // B1 (Port 1 Bit 1 Output Mode) = PUSH_PULL (P1.1 output is push-pull.)
 757   1               // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 758   1               //     drain.)
 759   1               // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 760   1               //     drain.)
 761   1               // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 762   1               //     drain.)
 763   1               // B5 (Port 1 Bit 5 Output Mode) = OPEN_DRAIN (P1.5 output is open-
 764   1               //     drain.)
 765   1               // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 766   1               //     drain.)
 767   1               // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 768   1               //     drain.)
 769   1               */
 770   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__PUSH_PULL
 771   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__PUSH_PULL
 772   1                              | P1MDOUT_B4__PUSH_PULL | P1MDOUT_B5__PUSH_PULL
 773   1                              | P1MDOUT_B6__PUSH_PULL | P1MDOUT_B7__PUSH_PULL;
 774   1              // [P1MDOUT - Port 1 Output Mode]$
 775   1      
 776   1      
 777   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 778   1                              | P1MDIN_B3__DIGITAL | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
 779   1                              | P1MDIN_B6__DIGITAL | P1MDIN_B7__ANALOG;
 780   1              // $[P1MDIN - Port 1 Input Mode]
 781   1              // [P1MDIN - Port 1 Input Mode]$
 782   1      
 783   1              // $[P1SKIP - Port 1 Skip]
 784   1              /*
 785   1               // B0 (Port 1 Bit 0 Skip) = NOT_SKIPPED (P1.0 pin is not skipped by the
 786   1               //     crossbar.)
 787   1               // B1 (Port 1 Bit 1 Skip) = SKIPPED (P1.1 pin is skipped by the
 788   1               //     crossbar.)
 789   1               // B2 (Port 1 Bit 2 Skip) = SKIPPED (P1.2 pin is skipped by the
 790   1               //     crossbar.)
 791   1               // B3 (Port 1 Bit 3 Skip) = SKIPPED (P1.3 pin is skipped by the
 792   1               //     crossbar.)
 793   1               // B4 (Port 1 Bit 4 Skip) = SKIPPED (P1.4 pin is skipped by the
 794   1               //     crossbar.)
 795   1               // B5 (Port 1 Bit 5 Skip) = SKIPPED (P1.5 pin is skipped by the
 796   1               //     crossbar.)
 797   1               // B6 (Port 1 Bit 6 Skip) = SKIPPED (P1.6 pin is skipped by the
 798   1               //     crossbar.)
 799   1               // B7 (Port 1 Bit 7 Skip) = SKIPPED (P1.7 pin is skipped by the
 800   1               //     crossbar.)
 801   1               */
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 14  

 802   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 803   1                              | P1SKIP_B3__SKIPPED | P1SKIP_B4__NOT_SKIPPED | P1SKIP_B5__NOT_SKIPPED
 804   1                              | P1SKIP_B6__NOT_SKIPPED | P1SKIP_B7__NOT_SKIPPED;
 805   1              // [P1SKIP - Port 1 Skip]$
 806   1      
 807   1              // $[P1MASK - Port 1 Mask]
 808   1              // [P1MASK - Port 1 Mask]$
 809   1      
 810   1              // $[P1MAT - Port 1 Match]
 811   1              // [P1MAT - Port 1 Match]$
 812   1      
 813   1              P1MAT = P1MAT_B0__HIGH | P1MAT_B1__HIGH | P1MAT_B2__HIGH | P1MAT_B3__HIGH
 814   1                                      | P1MAT_B4__HIGH | P1MAT_B5__HIGH | P1MAT_B6__HIGH | P1MAT_B7__HIGH;
 815   1      }
 816          
 817          extern void PORTS_2_enter_DefaultMode_from_RESET(void) {
 818   1              // $[P2 - Port 2 Pin Latch]
 819   1              // [P2 - Port 2 Pin Latch]$
 820   1      
 821   1              // $[P2MDOUT - Port 2 Output Mode]
 822   1              /*
 823   1               // B0 (Port 2 Bit 0 Output Mode) = OPEN_DRAIN (P2.0 output is open-
 824   1               //     drain.)
 825   1               // B1 (Port 2 Bit 1 Output Mode) = OPEN_DRAIN (P2.1 output is open-
 826   1               //     drain.)
 827   1               // B2 (Port 2 Bit 2 Output Mode) = OPEN_DRAIN (P2.2 output is open-
 828   1               //     drain.)
 829   1               // B3 (Port 2 Bit 3 Output Mode) = OPEN_DRAIN (P2.3 output is open-
 830   1               //     drain.)
 831   1               // B4 (Port 2 Bit 4 Output Mode) = OPEN_DRAIN (P2.4 output is open-
 832   1               //     drain.)
 833   1               // B5 (Port 2 Bit 5 Output Mode) = OPEN_DRAIN (P2.5 output is open-
 834   1               //     drain.)
 835   1               // B6 (Port 2 Bit 6 Output Mode) = PUSH_PULL (P2.6 output is push-pull.)
 836   1               */
 837   1              P2MDOUT = P2MDOUT_B0__PUSH_PULL | P2MDOUT_B1__OPEN_DRAIN
 838   1                              | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__PUSH_PULL
 839   1                              | P2MDOUT_B4__OPEN_DRAIN | P2MDOUT_B5__OPEN_DRAIN
 840   1                              | P2MDOUT_B6__PUSH_PULL;
 841   1      
 842   1      
 843   1              SFRPAGE = 0x20;
 844   1                      P2SKIP = P2SKIP_B0__NOT_SKIPPED | P2SKIP_B1__NOT_SKIPPED
 845   1                                      | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__SKIPPED;
 846   1              // [P2MDOUT - Port 2 Output Mode]$
 847   1      
 848   1              // $[P2MDIN - Port 2 Input Mode]
 849   1              // [P2MDIN - Port 2 Input Mode]$
 850   1      
 851   1              // $[P2SKIP - Port 2 Skip]
 852   1              // [P2SKIP - Port 2 Skip]$
 853   1      
 854   1              // $[P2MASK - Port 2 Mask]
 855   1              // [P2MASK - Port 2 Mask]$
 856   1      
 857   1              // $[P2MAT - Port 2 Match]
 858   1              // [P2MAT - Port 2 Match]$
 859   1      
 860   1      }
 861          
 862          extern void PORTS_3_enter_DefaultMode_from_RESET(void) {
 863   1              // $[P3 - Port 3 Pin Latch]
 864   1              // [P3 - Port 3 Pin Latch]$
C51 COMPILER V9.53.0.0   INITDEVICEPM                                                      05/08/2017 18:39:41 PAGE 15  

 865   1      
 866   1              // $[P3MDOUT - Port 3 Output Mode]
 867   1              /*
 868   1               // B0 (Port 3 Bit 0 Output Mode) = OPEN_DRAIN (P3.0 output is open-
 869   1               //     drain.)
 870   1               // B1 (Port 3 Bit 1 Output Mode) = OPEN_DRAIN (P3.1 output is open-
 871   1               //     drain.)
 872   1               // B2 (Port 3 Bit 2 Output Mode) = OPEN_DRAIN (P3.2 output is open-
 873   1               //     drain.)
 874   1               // B3 (Port 3 Bit 3 Output Mode) = OPEN_DRAIN (P3.3 output is open-
 875   1               //     drain.)
 876   1               // B4 (Port 3 Bit 4 Output Mode) = PUSH_PULL (P3.4 output is push-pull.)
 877   1               // B7 (Port 3 Bit 7 Output Mode) = OPEN_DRAIN (P3.7 output is open-
 878   1               //     drain.)
 879   1               */
 880   1              SFRPAGE = 0x20;
 881   1              P3MDOUT = P3MDOUT_B0__OPEN_DRAIN | P3MDOUT_B1__OPEN_DRAIN
 882   1                              | P3MDOUT_B2__OPEN_DRAIN | P3MDOUT_B3__OPEN_DRAIN
 883   1                              | P3MDOUT_B4__PUSH_PULL | P3MDOUT_B7__OPEN_DRAIN;
 884   1              // [P3MDOUT - Port 3 Output Mode]$
 885   1      
 886   1      
 887   1              SFRPAGE = 0x20;
 888   1                      P2SKIP = P2SKIP_B0__SKIPPED | P2SKIP_B1__NOT_SKIPPED
 889   1                                      | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__SKIPPED;
 890   1              // $[P3MDIN - Port 3 Input Mode]
 891   1              // [P3MDIN - Port 3 Input Mode]$
 892   1      
 893   1      }
 894          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    283    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
