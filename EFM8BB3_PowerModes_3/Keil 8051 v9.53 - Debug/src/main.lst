C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\src\main.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Binyami
                    -n\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\src\main.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2)
                    - FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Binyamin\SimplicityStudio\
                    -v4_workspace\EFM8BB3_PowerModes_3\inc;C:\Users\Binyamin\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\inc\config;C:
                    -\Users\Binyamin\SimplicityStudio\v4_workspace\EFM8BB3_PowerModes_3\inc\graphics;C:/SiliconLabs/SimplicityStudio/v4/devel
                    -oper/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK
                    -2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:/S
                    -iliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:/SiliconLa
                    -bs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs/Simplic
                    -ityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;C:/SiliconLabs/SimplicityStudio/v4/develop
                    -er/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8
                    -BB3/inc) PRINT(.\src\main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\main.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // main.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2015 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This example demonstrates the available power modes on the EFM8BB3 STK using
  10          // the LCD and push buttons.
  11          //
  12          //-----------------------------------------------------------------------------
  13          // How To Test: EFM8BB3 STK
  14          //-----------------------------------------------------------------------------
  15          // 1) Place the SW104 switch in "AEM" mode.
  16          // 2) Connect the EFM8BB3 STK board to a PC using a mini USB cable.
  17          // 3) Compile and download code to the EFM8BB3 STK board.
  18          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  19          //    click the Debug button in the quick menu, or press F11.
  20          // 4) Run the code.
  21          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  22          //    click the Resume button in the quick menu, or press F8.
  23          // 5) The power modes example should start.
  24          // 6) Press PB1 to cycle through the 6 different power modes shown on
  25          //    the LCD.
  26          // 7) Press PB0 to enter the selected power mode. The LED turns off.
  27          //    For all modes except Shutdown, the display will show "*Active*" while
  28          //    in the mode. For Shutdown mode the display is turned off.
  29          // 8) Press PB0 (all modes except Stop and Shutdown) to return to the menu,
  30          //    or press Reset (all modes) to restart the example. The LED turns on.
  31          //
  32          // Target:         EFM8BB3
  33          // Tool chain:     Generic
  34          //
  35          // Release 0.1 (MD;AT)
  36          //    - Initial Revision
  37          //    - 1 APR 2016
  38          //
  39          //-----------------------------------------------------------------------------
  40          // Resources:
  41          //-----------------------------------------------------------------------------
  42          // SYSCLK - 24.5 MHz HFOSC0 / 1
  43          // SPI0   - 1 MHz
  44          // Timer2 - 2 MHz (SPI CS delay)
  45          // Timer3 - 1 kHz (1 ms tick)
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 2   

  46          // P2.6 - Display CS (Active High)
  47          // P0.6 - SCK
  48          // P1.0 - MOSI
  49          // P1.4 - LED G
  50          // P0.2 - Push Button 0
  51          // P0.3 - Push Button 1
  52          // P1.7 - Joystick (THIS IS NOW USED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
             -)
  53          // P3.4 - Display enable
  54          //
  55          //-----------------------------------------------------------------------------
  56          #include <stdlib.h>
  57          #include <string.h>
  58          #include <stdio.h>
  59          #include "bsp.h"
  60          #include "pwr.h"
  61          
  62          #include "draw.h"
  63          #include "tick.h"
  64          #include "InitDevice.h"
  65          
  66          
  67          
  68          
  69          //-----------------------------------------------------------------------------
  70          // Local Definitions
  71          //-----------------------------------------------------------------------------
  72          
  73          // Power mode enumeration
  74          #define NORMAL_MODE 0
  75          #define IDLE_MODE 1
  76          #define STOP_MODE 2
  77          #define SUSPEND_MODE 3
  78          #define SNOOZE_MODE 4
  79          #define SHUTDOWN_MODE 5
  80          #define LAST_POWER_MODE SHUTDOWN_MODE
  81          #define BC_DISCONNECTED 0
  82          SI_SBIT (BC_EN, SFR_P2, 2);            // Board Controller Enable
  83          
  84          SI_VARIABLE_SEGMENT_POINTER(powerModeText[], char, SI_SEG_CODE) =
  85          {
  86            "0. Normal Mode",
  87            "1. Idle Mode",
  88            "2. Stop Mode",
  89            "3. Suspend Mode",
  90            "4. Snooze Mode",
  91            "5. Shutdown Mode",
  92          };
  93          
  94          // Power mode status
  95          #define STATUS_MODE_ACTIVE 0
  96          #define STATUS_MODE_WAKEUP 1
  97          
  98          SI_VARIABLE_SEGMENT_POINTER(powerStatusText[], char, SI_SEG_CODE) =
  99          {
 100            "*Active*",
 101            "*Wakeup*",
 102          };
 103          
 104          // Function that demonstrates the available power modes
 105          //void APP_enterPowerMode(uint8_t mode);
 106          
 107          
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 3   

 108          //-----------------------------------------------------------------------------
 109          // User Interface Functions
 110          //-----------------------------------------------------------------------------
 111          
 112          // Push button assignments
 113          #define UI_BTN_MENU   (1 << 0)
 114          #define UI_BTN_SELECT (1 << 1)
 115          
 116          // Read and return push button status
 117          uint8_t UI_getButtons(void)
 118          {
 119   1        uint8_t status = 0;
 120   1        if (BSP_PB1 == BSP_PB_PRESSED) {
 121   2          status = UI_BTN_MENU;
 122   2        } else if (BSP_PB0 == BSP_PB_PRESSED) {
 123   2          status = UI_BTN_SELECT;
 124   2        }
 125   1        return status;
 126   1      }
 127          
 128          // Manage the UI menu and return the user selection
 129          uint8_t UI_getPowerMode(uint8_t mode)
 130          {
 131   1        // Initialize the display and draw the UI
 132   1        DISP_Init();
 133   1        DrawSplashScreen();
 134   1        DrawScreenText(powerModeText[mode], TEXT_ROW0_Y);
 135   1      
 136   1        // Menu selection loop
 137   1        while (true)
 138   1        {
 139   2          // Wait for button press leading edge
 140   2          while (UI_getButtons() != 0);
 141   2          while (UI_getButtons() == 0);
 142   2      
 143   2          // Cycle menu through available modes
 144   2          if (UI_getButtons() & UI_BTN_MENU)
 145   2          {
 146   3            mode++;
 147   3            if (mode > LAST_POWER_MODE)
 148   3            {
 149   4              mode = NORMAL_MODE;
 150   4            }
 151   3            DrawScreenText(powerModeText[mode], TEXT_ROW0_Y);
 152   3          }
 153   2          // Selection made, break out of menu loop
 154   2          else if (UI_getButtons() & UI_BTN_SELECT)
 155   2          {
 156   3            break;
 157   3          }
 158   2        }
 159   1      
 160   1        // Wait for all buttons to be released
 161   1        while (UI_getButtons() != 0);
 162   1      
 163   1        // Display mode status, turn off the LED and return the selection
 164   1        DrawScreenText(powerStatusText[STATUS_MODE_ACTIVE], TEXT_ROW1_Y);
 165   1        BSP_LED_G = BSP_LED_OFF;
 166   1        return mode;
 167   1      }
 168          
 169          // Disables the LCD display
 170          void UI_disableDisplay(void)
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 4   

 171          {
 172   1        // Clear the display screen
 173   1        DISP_ClearAll();
 174   1        // Wait for BSP to complete all display updates
 175   1        while (BSP_DISP_CS == SPI_CS_ASSERT_LVL);
 176   1        // Disable the display
 177   1        BSP_DISP_EN = DISP_EN_BC;
 178   1      }
 179          
 180          // Port Match ISR - Triggered on leading edge of UI_BTN_SELECT.
 181          
 182          int previousflag;
 183          int button_flag = 0;
 184          int flag2 = 0;
 185          extern void changedisplay(void); //prototype
 186           SI_INTERRUPT (PMATCH_ISR, PMATCH_IRQn)
 187          {
 188   1        // Turn on LED whenever UI_BTN_SELECT is pressed
 189   1        //BSP_LED_G = BSP_LED_ON;
 190   1               button_flag = -1*button_flag;
 191   1               flag2 = -1 * flag2;
 192   1      }
 193          
 194          
 195          
 196          
 197          
 198          
 199          
 200          
 201          
 202          
 203          
 204          
 205          #define JOYSTICK_MV_C          3       ///< center position in mV
 206          #define JOYSTICK_MV_N          2831    ///< north position in mV
 207          #define JOYSTICK_MV_E          2533    ///< east position in mV
 208          #define JOYSTICK_MV_S          1650    ///< south position in mV
 209          #define JOYSTICK_MV_W          1980    ///< west position in mV
 210          
 211          #define JOYSTICK_MV_ERROR      150
 212          
 213          #define JOYSTICK_NONE          0       ///< not pressed
 214          #define JOYSTICK_C             1       ///< center
 215          #define JOYSTICK_N             2       ///< north
 216          #define JOYSTICK_E             3       ///< east
 217          #define JOYSTICK_S             4       ///< south
 218          #define JOYSTICK_W             5       ///< west
 219          
 220          
 221           uint8_t JOYSTICK_convert_mv_to_direction(uint32_t mV);
 222          
 223          
 224          
 225          
 226          
 227          
 228          
 229          
 230          
 231          
 232          
 233          
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 5   

 234          char var[8]= {0,0,0,0,0,0,0,0};
 235          int tester;
 236          char array2[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 237          char array1[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 238          int flagX;
 239          int flagY;
 240          int startrender;
 241          int endrender;
 242          char testarr[5];
 243          char temps[16];
 244          char wholebuf[30][16];
 245          uint8_t dir;
 246          uint8_t dir_flag = 0;
 247          int linewidth=0;
 248          int linelength=0;
 249          int m;
 250          int l;
 251          int lineCount = 0;
 252          char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 253          int k = 0;
 254          int j;
 255          int counter = 0;
 256          int c = 0;
 257          int i = 0;
 258          char testChar;
 259          #define UART_BUFFERSIZE        64
 260          int write_flag=0;
 261          
 262          
 263          SI_INTERRUPT (ADC0EOC_ISR, ADC0EOC_IRQn)
 264          {
 265   1        uint32_t mV;
 266   1        P1_B4 = !P1_B4;
 267   1      
 268   1        ADC0CN0_ADINT = 0; // Clear ADC0 conv. complete flag
 269   1      
 270   1        mV = (ADC0 * (uint32_t) 3300) / 1023;
 271   1      
 272   1        dir = JOYSTICK_convert_mv_to_direction(mV);
 273   1      
 274   1      }
 275          
 276          
 277          
 278          //-----------------------------------------------------------------------------
 279          // Global Variables
 280          //-----------------------------------------------------------------------------
 281          uint8_t UART_Buffer[UART_BUFFERSIZE];
 282          uint8_t UART_Buffer_Size = 0;
 283          uint8_t UART_Input_First = 0;
 284          uint8_t UART_Output_First = 0;
 285          uint8_t TX_Ready =1;
 286          uint8_t Byte = 0;
 287          
 288          //-----------------------------------------------------------------------------
 289          // UART0_ISR
 290          //-----------------------------------------------------------------------------
 291          //
 292          // UART0 ISR Content goes here. Remember to clear flag bits:
 293          // SCON0::RI (Receive Interrupt Flag)
 294          // SCON0::TI (Transmit Interrupt Flag)
 295          //
 296          // This routine is invoked whenever a character is entered or displayed on the
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 6   

 297          // Hyperterminal.
 298          //
 299          //-----------------------------------------------------------------------------
 300          
 301          
 302          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
 303          {
 304   1                 if (SCON0_RI == 1)
 305   1                 {
 306   2                    if( UART_Buffer_Size == 0)  {    // If new word is entered
 307   3                       UART_Input_First = 0;    }
 308   2      
 309   2                    SCON0_RI = 0;                          // Clear interrupt flag
 310   2      
 311   2                    Byte = SBUF0;                    // Read a character from UART
 312   2      
 313   2      
 314   2      
 315   2                    /*//Individual strings approach
 316   2                    if ((linelength == 0) && (linewidth < 16)){
 317   2                        array1[linewidth] = Byte;
 318   2                        linewidth++;
 319   2                    }else{
 320   2                        linelength++;
 321   2                        linewidth = 0;
 322   2                    }
 323   2      
 324   2                    if((linelength == 1) && (linewidth<16)){
 325   2                        array2[linewidth] = Byte;
 326   2                        linewidth++;
 327   2                    }else{
 328   2                        linelength++;
 329   2                        linewidth = 0;
 330   2                    }
 331   2                */
 332   2      
 333   2      
 334   2      
 335   2                    if (linewidth<16){
 336   3                       wholebuf[linelength][linewidth] = Byte;
 337   3                      // array1[linewidth] = Byte;
 338   3                       linewidth++;
 339   3                      // wholebuf[0][0] = Byte;
 340   3      
 341   3               }
 342   2               else{
 343   3                       linelength++;
 344   3                       linewidth = 0;
 345   3                       wholebuf[linelength][linewidth] = Byte;
 346   3                       linewidth++;
 347   3               }
 348   2      
 349   2      
 350   2      
 351   2                    if (UART_Buffer_Size < UART_BUFFERSIZE)
 352   2                    {
 353   3                       UART_Buffer[UART_Input_First] = Byte; // Store in array
 354   3      
 355   3                       UART_Buffer_Size++;           // Update array's size
 356   3      
 357   3                       UART_Input_First++;           // Update counter
 358   3                    }
 359   2      
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 7   

 360   2                    write_flag = 1;
 361   2      
 362   2                 }
 363   1                 //Byte = 0;
 364   1      }
 365          
 366          //-----------------------------------------------------------------------------
 367          // Example main()
 368          //-----------------------------------------------------------------------------
 369          void main(void)
 370          {
 371   1          uint8_t modeSelected = NORMAL_MODE;
 372   1          BC_EN = BC_DISCONNECTED;
 373   1          linelength = 0;
 374   1          linewidth = 0;
 375   1      
 376   1        // Initialize the device
 377   1        enter_DefaultMode_from_RESET();
 378   1      
 379   1        // Safety trap. Press either push button while resetting the device to
 380   1        // stall the application here.
 381   1        //while (UI_getButtons());
 382   1      
 383   1        // Start with the LED on
 384   1        BSP_LED_G = BSP_LED_ON;
 385   1      
 386   1        // Enable all interrupts
 387   1        IE_EA = 1;
 388   1        for (j = 0; i<128; i++){
 389   2                DrawScreenText("                             ", i); //clear whole LCD
 390   2        }
 391   1      
 392   1        //DrawScreenText("NORTH WAS PRESSED", 50);
 393   1        // Mainloop
 394   1      
 395   1        testarr[0] = 0;
 396   1        testarr[1] = 0;
 397   1        testarr[2] = 0;
 398   1        testarr[3] = 0;
 399   1        testarr[4] = 0;
 400   1        for(l=0 ;  l<30 ; l++){
 401   2                for (c = 0; c<16; c++){
 402   3                        wholebuf[l][c] = 0;
 403   3                    temp[c] = 0;
 404   3                    temps[c] = 0;
 405   3                    button_flag = -1;
 406   3                    flag2 = -1;
 407   3                }
 408   2        }
 409   1        previousflag = flag2;
 410   1      
 411   1        //wholebuf[0][3] = 66;
 412   1        while (true)
 413   1        {
 414   2      
 415   2      
 416   2                /*
 417   2                for(flagY = 0; flagY<15; flagY++){
 418   2                        for(flagX = 0; flagX < 2; flagX++){
 419   2                                sprintf(&temps, "0x%x 0x%x 0x%x", wholebuf[linelength-14+flagY][0], wholebuf[linelength-14+fla
             -gY][1],
 420   2                                                wholebuf[linelength-14+flagY][2]);
 421   2                                DrawScreenText(temps, flagY*8);
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 8   

 422   2                        }
 423   2                        */
 424   2      
 425   2      
 426   2                            /*for(flagX = 0; flagX<16; flagX++){
 427   2                                        sprintf(temps, "0x%x",wholebuf[linelength-14+flagY][flagX]);
 428   2                                        temp[flagX*2] = temp[0];
 429   2                                        temp[flagX*2+1] = temp[1];
 430   2                                        //DrawScreenText(temp, flagY*8);
 431   2                                        DrawScreenText(temps,flagY*8);
 432   2                                }*/
 433   2      
 434   2      
 435   2      
 436   2      
 437   2                //DrawScreenText("this is a test", 56);
 438   2                //temps = 93;
 439   2                //DrawScreenText(temps, 40);
 440   2                if (dir == JOYSTICK_N){
 441   3                        P1_B4 = !P1_B4;
 442   3                        DrawScreenText("NORTH WAS PRESSED", 50);
 443   3                }
 444   2                /*
 445   2      
 446   2                 else if (dir == JOYSTICK_W){
 447   2                        DrawScreenText("WEST WAS PRESSED", 50);
 448   2                }
 449   2                else if (dir == JOYSTICK_S){
 450   2                                DrawScreenText("SOUTH WAS PRESSED", 50);
 451   2                        }
 452   2                else if (dir == JOYSTICK_E){
 453   2                                DrawScreenText("EAST WAS PRESSED", 50);
 454   2                        }*/
 455   2      
 456   2          // Get the user's selection
 457   2          //modeSelected = UI_getPowerMode(modeSelected);
 458   2                //DrawScreenText(testarr, 48);
 459   2      
 460   2                if(flag2 != previousflag){
 461   3                changedisplay();
 462   3                previousflag = flag2;
 463   3            }
 464   2                if(write_flag == 1){
 465   3                        write_flag = 0;
 466   3                for(k = 0; k<15; k++){
 467   4                       for(i = 0; i<16; i++){
 468   5                               if(button_flag == 1){
 469   6                                        sprintf(&temps[i],"%x",wholebuf[linelength-14+k][i]);
 470   6                                        DrawScreenText(temps, k*8);
 471   6                                }else{
 472   6                                        temp[i] = wholebuf[linelength-14+k][i];
 473   6                                        DrawScreenText(temp, k*8);
 474   6                        }
 475   5                        }
 476   4                }
 477   3                }
 478   2      
 479   2      
 480   2      
 481   2      
 482   2      
 483   2      
 484   2      
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 9   

 485   2      
 486   2                     }//END OF WHILE LOOP
 487   1      
 488   1      
 489   1      } //END OF MAIN()
 490          
 491          
 492          
 493          uint8_t JOYSTICK_convert_mv_to_direction(uint32_t mV)
 494           {
 495   1               uint8_t joystickDirection;
 496   1      
 497   1           // determine which direction pad was pressed
 498   1           if ((mV <= JOYSTICK_MV_C + JOYSTICK_MV_ERROR))
 499   1           {
 500   2             joystickDirection = JOYSTICK_C;
 501   2           }
 502   1           else if ((mV >= JOYSTICK_MV_N - JOYSTICK_MV_ERROR) && \
 503   1                    (mV <= JOYSTICK_MV_N + JOYSTICK_MV_ERROR))
 504   1           {
 505   2             joystickDirection = JOYSTICK_N;
 506   2           }
 507   1           else if ((mV >= JOYSTICK_MV_E - JOYSTICK_MV_ERROR) && \
 508   1                    (mV <= JOYSTICK_MV_E + JOYSTICK_MV_ERROR))
 509   1           {
 510   2             joystickDirection = JOYSTICK_E;
 511   2           }
 512   1           else if ((mV >= JOYSTICK_MV_S - JOYSTICK_MV_ERROR) && \
 513   1                    (mV <= JOYSTICK_MV_S + JOYSTICK_MV_ERROR))
 514   1           {
 515   2             joystickDirection = JOYSTICK_S;
 516   2           }
 517   1           else if ((mV >= JOYSTICK_MV_W - JOYSTICK_MV_ERROR) && \
 518   1                    (mV <= JOYSTICK_MV_W + JOYSTICK_MV_ERROR))
 519   1           {
 520   2             joystickDirection = JOYSTICK_W;
 521   2           }
 522   1           else
 523   1             {
 524   2               joystickDirection = JOYSTICK_NONE;
 525   2             }
 526   1      
 527   1             return joystickDirection;
 528   1      }
 529          
 530          
 531          void changedisplay(void){
 532   1              if(flag2 == 1){
 533   2                      for(k = 0; k<15; k++){
 534   3                                        for(i = 0; i<16; i++){
 535   4      
 536   4                                                        sprintf(&temps[i],"%x",wholebuf[linelength-14+k][i]);
 537   4                                                        DrawScreenText(temps, k*8);
 538   4      
 539   4                                }
 540   3                      }
 541   2              }
 542   1              else if(flag2 ==-1){
 543   2                      for(k = 0; k<15; k++){
 544   3                                for(i = 0; i<16; i++){
 545   4                                        temp[i] = wholebuf[linelength-14+k][i];
 546   4                                        DrawScreenText(temp, k*8);
 547   4                                }
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 10  

 548   3                      }
 549   2      
 550   2              }
 551   1      
 552   1      
 553   1      
 554   1      
 555   1      
 556   1      
 557   1              //flag2 = flag2 * -1;
 558   1      
 559   1      }
 560          
 561          
 562          
 563          
 564              // Turn off the display for Shutdown Mode
 565             // if (modeSelected == SHUTDOWN_MODE)
 566              //{
 567                //UI_disableDisplay();
 568              //}
 569          
 570              // Halt the display tick and wait for display updates to finish
 571              //TMR3CN0 &= ~TMR3CN0_TR3__BMASK;
 572              //while (BSP_DISP_CS == SPI_CS_ASSERT_LVL);
 573          
 574              // Change all input pins to analog to disable internal pullups
 575              //P0MDIN = 0x44;
 576              //P1MDIN = 0x11;
 577              //P2MDIN = 0x40;
 578              //P3MDIN = 0x10;
 579          
 580              // Enter the selected power mode
 581              //APP_enterPowerMode(modeSelected);
 582          
 583          
 584          
 585          
 586          
 587          
 588              // Restore all pins to digital mode for normal operation
 589              //P3MDIN = 0x9F;
 590              //P2MDIN = 0x7F;
 591              //P1MDIN = 0xFF;
 592              //P0MDIN = 0xFF;
 593          
 594              // Restart the display update tick
 595             // TMR3CN0 |= TMR3CN0_TR3__BMASK;
 596          
 597          
 598          
 599          
 600          //-----------------------------------------------------------------------------
 601          // Demonstrate the available power modes
 602          //-----------------------------------------------------------------------------
 603          void APP_enterPowerMode(uint8_t mode)
 604          {
 605   1        // Clear the PMU wake flags
 606   1        uint8_t wake_flags = PWR_readAndClearWakeFlags();
 607   1      
 608   1        // Start the selected power mode
 609   1        switch (mode)
 610   1        {
C51 COMPILER V9.53.0.0   MAIN                                                              05/08/2017 18:39:41 PAGE 11  

 611   2          case NORMAL_MODE:
 612   2            // Wait for button press on PB0
 613   2            while (BSP_PB0 != BSP_PB_PRESSED);
 614   2            break;
 615   2      
 616   2          case IDLE_MODE:
 617   2            // Interrupts must be enabled to return from Idle mode
 618   2            PWR_enterIdle();
 619   2            break;
 620   2      
 621   2          case STOP_MODE:
 622   2            // Disable VMON0 to see datasheet current (VMON0 adds ~15 uA)
 623   2            PWR_enterStop();
 624   2            break;
 625   2      
 626   2          case SUSPEND_MODE:
 627   2            // Disable VMON0 to see datasheet current (VMON0 adds ~15 uA)
 628   2            // Enter Suspend mode with port match previously enabled as the wake source
 629   2            PWR_enterSuspend();
 630   2            wake_flags = PWR_readAndClearWakeFlags();
 631   2            break;
 632   2      
 633   2          case SNOOZE_MODE:
 634   2            // Disable VMON0 to see datasheet current (VMON0 adds ~15 uA)
 635   2            // Enter Snooze mode with port match previously enabled as the wake source
 636   2            PWR_enterSnooze();
 637   2            wake_flags = PWR_readAndClearWakeFlags();
 638   2            break;
 639   2      
 640   2          case SHUTDOWN_MODE:
 641   2            // Disable VMON0 to see datasheet current (VMON0 adds ~15 uA)
 642   2            PWR_enterShutdown();
 643   2            break;
 644   2        }
 645   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2070    ----
   CONSTANT SIZE    =    158    ----
   XDATA SIZE       =    683       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
