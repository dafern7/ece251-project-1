C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\student
                    -\SimplicityStudio\v4_workspace\EFM8BB3_FunctionGenerator\src\InitDevice.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNI
                    -NGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\student\Simplici
                    -tyStudio\v4_workspace\EFM8BB3_FunctionGenerator\inc;C:\Users\student\SimplicityStudio\v4_workspace\EFM8BB3_FunctionGener
                    -ator\inc\config;C:\Users\student\SimplicityStudio\v4_workspace\EFM8BB3_FunctionGenerator\inc\graphics;C:/SiliconLabs/Sim
                    -plicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;C:/SiliconLabs/SimplicityStudio/v4/dev
                    -eloper/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLS
                    -TK2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:
                    -/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:/Silicon
                    -Labs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs/Simpl
                    -icityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_joystick;C:/SiliconLabs/SimplicityStudio/v4/develope
                    -r/sdks/8051/v4.0.3//kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.
                    -3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\s
                    -rc\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "InitDevice.h"
  12          #include "function_generator.h"
  13          
  14          // USER PROTOTYPES
  15          // USER FUNCTIONS
  16          
  17          // $[Library Includes]
  18          // [Library Includes]$
  19          
  20          //==============================================================================
  21          // enter_DefaultMode_from_RESET
  22          //==============================================================================
  23          extern void enter_DefaultMode_from_RESET(void) {
  24   1              // $[Config Calls]
  25   1              // Save the SFRPAGE
  26   1              uint8_t SFRPAGE_save = SFRPAGE;
  27   1              WDT_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_0_enter_DefaultMode_from_RESET();
  29   1              PORTS_1_enter_DefaultMode_from_RESET();
  30   1              PORTS_2_enter_DefaultMode_from_RESET();
  31   1              PORTS_3_enter_DefaultMode_from_RESET();
  32   1              PBCFG_0_enter_DefaultMode_from_RESET();
  33   1              ADC_0_enter_DefaultMode_from_RESET();
  34   1              DAC_0_enter_DefaultMode_from_RESET();
  35   1              DAC_1_enter_DefaultMode_from_RESET();
  36   1              DACGCF_0_enter_DefaultMode_from_RESET();
  37   1              VREF_0_enter_DefaultMode_from_RESET();
  38   1              CLOCK_0_enter_DefaultMode_from_RESET();
  39   1              TIMER01_0_enter_DefaultMode_from_RESET();
  40   1              TIMER16_3_enter_DefaultMode_from_RESET();
  41   1              TIMER16_4_enter_DefaultMode_from_RESET();
  42   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  43   1              SPI_0_enter_DefaultMode_from_RESET();
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 2   

  44   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  45   1              UART_0_enter_DefaultMode_from_RESET();
  46   1              // Restore the SFRPAGE
  47   1              SFRPAGE = SFRPAGE_save;
  48   1              // [Config Calls]$
  49   1      
  50   1      }
  51          
  52          
  53          //================================================================================
  54          // WDT_0_enter_DefaultMode_from_RESET
  55          //================================================================================
  56          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  57   1              // $[WDTCN - Watchdog Timer Control]
  58   1              SFRPAGE = 0x00;
  59   1              //Disable Watchdog with key sequence
  60   1              WDTCN = 0xDE; //First key
  61   1              WDTCN = 0xAD; //Second key
  62   1              // [WDTCN - Watchdog Timer Control]$
  63   1      
  64   1      }
  65          
  66          //================================================================================
  67          // PORTS_0_enter_DefaultMode_from_RESET
  68          //================================================================================
  69          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  70   1              // $[P0 - Port 0 Pin Latch]
  71   1              /*
  72   1               // B0 (Port 0 Bit 0 Latch) = HIGH (P0.0 is high. Set P0.0 to drive or
  73   1               //     float high.)
  74   1               // B1 (Port 0 Bit 1 Latch) = HIGH (P0.1 is high. Set P0.1 to drive or
  75   1               //     float high.)
  76   1               // B2 (Port 0 Bit 2 Latch) = HIGH (P0.2 is high. Set P0.2 to drive or
  77   1               //     float high.)
  78   1               // B3 (Port 0 Bit 3 Latch) = HIGH (P0.3 is high. Set P0.3 to drive or
  79   1               //     float high.)
  80   1               // B4 (Port 0 Bit 4 Latch) = HIGH (P0.4 is high. Set P0.4 to drive or
  81   1               //     float high.)
  82   1               // B5 (Port 0 Bit 5 Latch) = HIGH (P0.5 is high. Set P0.5 to drive or
  83   1               //     float high.)
  84   1               // B6 (Port 0 Bit 6 Latch) = HIGH (P0.6 is high. Set P0.6 to drive or
  85   1               //     float high.)
  86   1               // B7 (Port 0 Bit 7 Latch) = HIGH (P0.7 is high. Set P0.7 to drive or
  87   1               //     float high.)
  88   1               */
  89   1              P0 = P0_B0__HIGH | P0_B1__HIGH | P0_B2__HIGH | P0_B3__HIGH | P0_B4__HIGH
  90   1                              | P0_B5__HIGH | P0_B6__HIGH | P0_B7__HIGH;
  91   1              // [P0 - Port 0 Pin Latch]$
  92   1      
  93   1              // $[P0MDOUT - Port 0 Output Mode]
  94   1              /*
  95   1               // B0 (Port 0 Bit 0 Output Mode) = OPEN_DRAIN (P0.0 output is open-
  96   1               //     drain.)
  97   1               // B1 (Port 0 Bit 1 Output Mode) = OPEN_DRAIN (P0.1 output is open-
  98   1               //     drain.)
  99   1               // B2 (Port 0 Bit 2 Output Mode) = OPEN_DRAIN (P0.2 output is open-
 100   1               //     drain.)
 101   1               // B3 (Port 0 Bit 3 Output Mode) = OPEN_DRAIN (P0.3 output is open-
 102   1               //     drain.)
 103   1               // B4 (Port 0 Bit 4 Output Mode) = PUSH_PULL (P0.4 output is push-pull.)
 104   1               // B5 (Port 0 Bit 5 Output Mode) = OPEN_DRAIN (P0.5 output is open-
 105   1               //     drain.)
 106   1               // B6 (Port 0 Bit 6 Output Mode) = OPEN_DRAIN (P0.6 output is open-
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 3   

 107   1               //     drain.)
 108   1               // B7 (Port 0 Bit 7 Output Mode) = OPEN_DRAIN (P0.7 output is open-
 109   1               //     drain.)
 110   1               */
 111   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
 112   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
 113   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__OPEN_DRAIN
 114   1                              | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__OPEN_DRAIN;
 115   1              // [P0MDOUT - Port 0 Output Mode]$
 116   1      
 117   1              // $[P0MDIN - Port 0 Input Mode]
 118   1              /*
 119   1               // B0 (Port 0 Bit 0 Input Mode) = DIGITAL (P0.0 pin is configured for
 120   1               //     digital mode.)
 121   1               // B1 (Port 0 Bit 1 Input Mode) = DIGITAL (P0.1 pin is configured for
 122   1               //     digital mode.)
 123   1               // B2 (Port 0 Bit 2 Input Mode) = DIGITAL (P0.2 pin is configured for
 124   1               //     digital mode.)
 125   1               // B3 (Port 0 Bit 3 Input Mode) = DIGITAL (P0.3 pin is configured for
 126   1               //     digital mode.)
 127   1               // B4 (Port 0 Bit 4 Input Mode) = DIGITAL (P0.4 pin is configured for
 128   1               //     digital mode.)
 129   1               // B5 (Port 0 Bit 5 Input Mode) = DIGITAL (P0.5 pin is configured for
 130   1               //     digital mode.)
 131   1               // B6 (Port 0 Bit 6 Input Mode) = DIGITAL (P0.6 pin is configured for
 132   1               //     digital mode.)
 133   1               // B7 (Port 0 Bit 7 Input Mode) = DIGITAL (P0.7 pin is configured for
 134   1               //     digital mode.)
 135   1               */
 136   1              P0MDIN = P0MDIN_B0__DIGITAL | P0MDIN_B1__DIGITAL | P0MDIN_B2__DIGITAL
 137   1                              | P0MDIN_B3__DIGITAL | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
 138   1                              | P0MDIN_B6__DIGITAL | P0MDIN_B7__DIGITAL;
 139   1              // [P0MDIN - Port 0 Input Mode]$
 140   1      
 141   1              // $[P0SKIP - Port 0 Skip]
 142   1              /*
 143   1               // B0 (Port 0 Bit 0 Skip) = NOT_SKIPPED (P0.0 pin is not skipped by the
 144   1               //     crossbar.)
 145   1               // B1 (Port 0 Bit 1 Skip) = NOT_SKIPPED (P0.1 pin is not skipped by the
 146   1               //     crossbar.)
 147   1               // B2 (Port 0 Bit 2 Skip) = NOT_SKIPPED (P0.2 pin is not skipped by the
 148   1               //     crossbar.)
 149   1               // B3 (Port 0 Bit 3 Skip) = NOT_SKIPPED (P0.3 pin is not skipped by the
 150   1               //     crossbar.)
 151   1               // B4 (Port 0 Bit 4 Skip) = NOT_SKIPPED (P0.4 pin is not skipped by the
 152   1               //     crossbar.)
 153   1               // B5 (Port 0 Bit 5 Skip) = NOT_SKIPPED (P0.5 pin is not skipped by the
 154   1               //     crossbar.)
 155   1               // B6 (Port 0 Bit 6 Skip) = NOT_SKIPPED (P0.6 pin is not skipped by the
 156   1               //     crossbar.)
 157   1               // B7 (Port 0 Bit 7 Skip) = NOT_SKIPPED (P0.7 pin is not skipped by the
 158   1               //     crossbar.)
 159   1               */
 160   1              P0SKIP = P0SKIP_B0__NOT_SKIPPED | P0SKIP_B1__NOT_SKIPPED
 161   1                              | P0SKIP_B2__NOT_SKIPPED | P0SKIP_B3__NOT_SKIPPED
 162   1                              | P0SKIP_B4__NOT_SKIPPED | P0SKIP_B5__NOT_SKIPPED
 163   1                              | P0SKIP_B6__NOT_SKIPPED | P0SKIP_B7__NOT_SKIPPED;
 164   1              // [P0SKIP - Port 0 Skip]$
 165   1      
 166   1              // $[P0MASK - Port 0 Mask]
 167   1              /*
 168   1               // B0 (Port 0 Bit 0 Mask Value) = IGNORED (P0.0 pin logic value is
 169   1               //     ignored and will not cause a port mismatch event.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 4   

 170   1               // B1 (Port 0 Bit 1 Mask Value) = IGNORED (P0.1 pin logic value is
 171   1               //     ignored and will not cause a port mismatch event.)
 172   1               // B2 (Port 0 Bit 2 Mask Value) = IGNORED (P0.2 pin logic value is
 173   1               //     ignored and will not cause a port mismatch event.)
 174   1               // B3 (Port 0 Bit 3 Mask Value) = IGNORED (P0.3 pin logic value is
 175   1               //     ignored and will not cause a port mismatch event.)
 176   1               // B4 (Port 0 Bit 4 Mask Value) = IGNORED (P0.4 pin logic value is
 177   1               //     ignored and will not cause a port mismatch event.)
 178   1               // B5 (Port 0 Bit 5 Mask Value) = IGNORED (P0.5 pin logic value is
 179   1               //     ignored and will not cause a port mismatch event.)
 180   1               // B6 (Port 0 Bit 6 Mask Value) = IGNORED (P0.6 pin logic value is
 181   1               //     ignored and will not cause a port mismatch event.)
 182   1               // B7 (Port 0 Bit 7 Mask Value) = IGNORED (P0.7 pin logic value is
 183   1               //     ignored and will not cause a port mismatch event.)
 184   1               */
 185   1              P0MASK = P0MASK_B0__IGNORED | P0MASK_B1__IGNORED | P0MASK_B2__IGNORED
 186   1                              | P0MASK_B3__IGNORED | P0MASK_B4__IGNORED | P0MASK_B5__IGNORED
 187   1                              | P0MASK_B6__IGNORED | P0MASK_B7__IGNORED;
 188   1              // [P0MASK - Port 0 Mask]$
 189   1      
 190   1              // $[P0MAT - Port 0 Match]
 191   1              /*
 192   1               // B0 (Port 0 Bit 0 Match Value) = HIGH (P0.0 pin logic value is compared
 193   1               //     with logic HIGH.)
 194   1               // B1 (Port 0 Bit 1 Match Value) = HIGH (P0.1 pin logic value is compared
 195   1               //     with logic HIGH.)
 196   1               // B2 (Port 0 Bit 2 Match Value) = HIGH (P0.2 pin logic value is compared
 197   1               //     with logic HIGH.)
 198   1               // B3 (Port 0 Bit 3 Match Value) = HIGH (P0.3 pin logic value is compared
 199   1               //     with logic HIGH.)
 200   1               // B4 (Port 0 Bit 4 Match Value) = HIGH (P0.4 pin logic value is compared
 201   1               //     with logic HIGH.)
 202   1               // B5 (Port 0 Bit 5 Match Value) = HIGH (P0.5 pin logic value is compared
 203   1               //     with logic HIGH.)
 204   1               // B6 (Port 0 Bit 6 Match Value) = HIGH (P0.6 pin logic value is compared
 205   1               //     with logic HIGH.)
 206   1               // B7 (Port 0 Bit 7 Match Value) = HIGH (P0.7 pin logic value is compared
 207   1               //     with logic HIGH.)
 208   1               */
 209   1              P0MAT = P0MAT_B0__HIGH | P0MAT_B1__HIGH | P0MAT_B2__HIGH | P0MAT_B3__HIGH
 210   1                              | P0MAT_B4__HIGH | P0MAT_B5__HIGH | P0MAT_B6__HIGH | P0MAT_B7__HIGH;
 211   1              // [P0MAT - Port 0 Match]$
 212   1      
 213   1      }
 214          
 215          //================================================================================
 216          // PORTS_1_enter_DefaultMode_from_RESET
 217          //================================================================================
 218          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 219   1              // $[P1 - Port 1 Pin Latch]
 220   1              /*
 221   1               // B0 (Port 1 Bit 0 Latch) = HIGH (P1.0 is high. Set P1.0 to drive or
 222   1               //     float high.)
 223   1               // B1 (Port 1 Bit 1 Latch) = HIGH (P1.1 is high. Set P1.1 to drive or
 224   1               //     float high.)
 225   1               // B2 (Port 1 Bit 2 Latch) = HIGH (P1.2 is high. Set P1.2 to drive or
 226   1               //     float high.)
 227   1               // B3 (Port 1 Bit 3 Latch) = HIGH (P1.3 is high. Set P1.3 to drive or
 228   1               //     float high.)
 229   1               // B4 (Port 1 Bit 4 Latch) = HIGH (P1.4 is high. Set P1.4 to drive or
 230   1               //     float high.)
 231   1               // B5 (Port 1 Bit 5 Latch) = HIGH (P1.5 is high. Set P1.5 to drive or
 232   1               //     float high.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 5   

 233   1               // B6 (Port 1 Bit 6 Latch) = HIGH (P1.6 is high. Set P1.6 to drive or
 234   1               //     float high.)
 235   1               // B7 (Port 1 Bit 7 Latch) = HIGH (P1.7 is high. Set P1.7 to drive or
 236   1               //     float high.)
 237   1               */
 238   1              P1 = P1_B0__HIGH | P1_B1__HIGH | P1_B2__HIGH | P1_B3__HIGH | P1_B4__HIGH
 239   1                              | P1_B5__HIGH | P1_B6__HIGH | P1_B7__HIGH;
 240   1              // [P1 - Port 1 Pin Latch]$
 241   1      
 242   1              // $[P1MDOUT - Port 1 Output Mode]
 243   1              /*
 244   1               // B0 (Port 1 Bit 0 Output Mode) = OPEN_DRAIN (P1.0 output is open-
 245   1               //     drain.)
 246   1               // B1 (Port 1 Bit 1 Output Mode) = OPEN_DRAIN (P1.1 output is open-
 247   1               //     drain.)
 248   1               // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 249   1               //     drain.)
 250   1               // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
 251   1               //     drain.)
 252   1               // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 253   1               //     drain.)
 254   1               // B5 (Port 1 Bit 5 Output Mode) = OPEN_DRAIN (P1.5 output is open-
 255   1               //     drain.)
 256   1               // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 257   1               //     drain.)
 258   1               // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 259   1               //     drain.)
 260   1               */
 261   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 262   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 263   1                              | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__OPEN_DRAIN
 264   1                              | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 265   1              // [P1MDOUT - Port 1 Output Mode]$
 266   1      
 267   1              // $[P1MDIN - Port 1 Input Mode]
 268   1              /*
 269   1               // B0 (Port 1 Bit 0 Input Mode) = DIGITAL (P1.0 pin is configured for
 270   1               //     digital mode.)
 271   1               // B1 (Port 1 Bit 1 Input Mode) = DIGITAL (P1.1 pin is configured for
 272   1               //     digital mode.)
 273   1               // B2 (Port 1 Bit 2 Input Mode) = DIGITAL (P1.2 pin is configured for
 274   1               //     digital mode.)
 275   1               // B3 (Port 1 Bit 3 Input Mode) = DIGITAL (P1.3 pin is configured for
 276   1               //     digital mode.)
 277   1               // B4 (Port 1 Bit 4 Input Mode) = DIGITAL (P1.4 pin is configured for
 278   1               //     digital mode.)
 279   1               // B5 (Port 1 Bit 5 Input Mode) = DIGITAL (P1.5 pin is configured for
 280   1               //     digital mode.)
 281   1               // B6 (Port 1 Bit 6 Input Mode) = DIGITAL (P1.6 pin is configured for
 282   1               //     digital mode.)
 283   1               // B7 (Port 1 Bit 7 Input Mode) = ANALOG (P1.7 pin is configured for
 284   1               //     analog mode.)
 285   1               */
 286   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 287   1                              | P1MDIN_B3__DIGITAL | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
 288   1                              | P1MDIN_B6__DIGITAL | P1MDIN_B7__ANALOG;
 289   1              // [P1MDIN - Port 1 Input Mode]$
 290   1      
 291   1              // $[P1SKIP - Port 1 Skip]
 292   1              /*
 293   1               // B0 (Port 1 Bit 0 Skip) = NOT_SKIPPED (P1.0 pin is not skipped by the
 294   1               //     crossbar.)
 295   1               // B1 (Port 1 Bit 1 Skip) = NOT_SKIPPED (P1.1 pin is not skipped by the
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 6   

 296   1               //     crossbar.)
 297   1               // B2 (Port 1 Bit 2 Skip) = NOT_SKIPPED (P1.2 pin is not skipped by the
 298   1               //     crossbar.)
 299   1               // B3 (Port 1 Bit 3 Skip) = NOT_SKIPPED (P1.3 pin is not skipped by the
 300   1               //     crossbar.)
 301   1               // B4 (Port 1 Bit 4 Skip) = NOT_SKIPPED (P1.4 pin is not skipped by the
 302   1               //     crossbar.)
 303   1               // B5 (Port 1 Bit 5 Skip) = NOT_SKIPPED (P1.5 pin is not skipped by the
 304   1               //     crossbar.)
 305   1               // B6 (Port 1 Bit 6 Skip) = NOT_SKIPPED (P1.6 pin is not skipped by the
 306   1               //     crossbar.)
 307   1               // B7 (Port 1 Bit 7 Skip) = SKIPPED (P1.7 pin is skipped by the
 308   1               //     crossbar.)
 309   1               */
 310   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__NOT_SKIPPED
 311   1                              | P1SKIP_B2__NOT_SKIPPED | P1SKIP_B3__NOT_SKIPPED
 312   1                              | P1SKIP_B4__NOT_SKIPPED | P1SKIP_B5__NOT_SKIPPED
 313   1                              | P1SKIP_B6__NOT_SKIPPED | P1SKIP_B7__SKIPPED;
 314   1              // [P1SKIP - Port 1 Skip]$
 315   1      
 316   1              // $[P1MASK - Port 1 Mask]
 317   1              /*
 318   1               // B0 (Port 1 Bit 0 Mask Value) = IGNORED (P1.0 pin logic value is
 319   1               //     ignored and will not cause a port mismatch event.)
 320   1               // B1 (Port 1 Bit 1 Mask Value) = IGNORED (P1.1 pin logic value is
 321   1               //     ignored and will not cause a port mismatch event.)
 322   1               // B2 (Port 1 Bit 2 Mask Value) = IGNORED (P1.2 pin logic value is
 323   1               //     ignored and will not cause a port mismatch event.)
 324   1               // B3 (Port 1 Bit 3 Mask Value) = IGNORED (P1.3 pin logic value is
 325   1               //     ignored and will not cause a port mismatch event.)
 326   1               // B4 (Port 1 Bit 4 Mask Value) = IGNORED (P1.4 pin logic value is
 327   1               //     ignored and will not cause a port mismatch event.)
 328   1               // B5 (Port 1 Bit 5 Mask Value) = IGNORED (P1.5 pin logic value is
 329   1               //     ignored and will not cause a port mismatch event.)
 330   1               // B6 (Port 1 Bit 6 Mask Value) = IGNORED (P1.6 pin logic value is
 331   1               //     ignored and will not cause a port mismatch event.)
 332   1               // B7 (Port 1 Bit 7 Mask Value) = IGNORED (P1.7 pin logic value is
 333   1               //     ignored and will not cause a port mismatch event.)
 334   1               */
 335   1              P1MASK = P1MASK_B0__IGNORED | P1MASK_B1__IGNORED | P1MASK_B2__IGNORED
 336   1                              | P1MASK_B3__IGNORED | P1MASK_B4__IGNORED | P1MASK_B5__IGNORED
 337   1                              | P1MASK_B6__IGNORED | P1MASK_B7__IGNORED;
 338   1              // [P1MASK - Port 1 Mask]$
 339   1      
 340   1              // $[P1MAT - Port 1 Match]
 341   1              /*
 342   1               // B0 (Port 1 Bit 0 Match Value) = HIGH (P1.0 pin logic value is compared
 343   1               //     with logic HIGH.)
 344   1               // B1 (Port 1 Bit 1 Match Value) = HIGH (P1.1 pin logic value is compared
 345   1               //     with logic HIGH.)
 346   1               // B2 (Port 1 Bit 2 Match Value) = HIGH (P1.2 pin logic value is compared
 347   1               //     with logic HIGH.)
 348   1               // B3 (Port 1 Bit 3 Match Value) = HIGH (P1.3 pin logic value is compared
 349   1               //     with logic HIGH.)
 350   1               // B4 (Port 1 Bit 4 Match Value) = HIGH (P1.4 pin logic value is compared
 351   1               //     with logic HIGH.)
 352   1               // B5 (Port 1 Bit 5 Match Value) = HIGH (P1.5 pin logic value is compared
 353   1               //     with logic HIGH.)
 354   1               // B6 (Port 1 Bit 6 Match Value) = HIGH (P1.6 pin logic value is compared
 355   1               //     with logic HIGH.)
 356   1               // B7 (Port 1 Bit 7 Match Value) = HIGH (P1.7 pin logic value is compared
 357   1               //     with logic HIGH.)
 358   1               */
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 7   

 359   1              P1MAT = P1MAT_B0__HIGH | P1MAT_B1__HIGH | P1MAT_B2__HIGH | P1MAT_B3__HIGH
 360   1                              | P1MAT_B4__HIGH | P1MAT_B5__HIGH | P1MAT_B6__HIGH | P1MAT_B7__HIGH;
 361   1              // [P1MAT - Port 1 Match]$
 362   1      
 363   1      }
 364          
 365          //================================================================================
 366          // PORTS_2_enter_DefaultMode_from_RESET
 367          //================================================================================
 368          extern void PORTS_2_enter_DefaultMode_from_RESET(void) {
 369   1              // $[P2 - Port 2 Pin Latch]
 370   1              // [P2 - Port 2 Pin Latch]$
 371   1      
 372   1              // $[P2MDOUT - Port 2 Output Mode]
 373   1              /*
 374   1               // B0 (Port 2 Bit 0 Output Mode) = PUSH_PULL (P2.0 output is push-pull.)
 375   1               // B1 (Port 2 Bit 1 Output Mode) = OPEN_DRAIN (P2.1 output is open-
 376   1               //     drain.)
 377   1               // B2 (Port 2 Bit 2 Output Mode) = OPEN_DRAIN (P2.2 output is open-
 378   1               //     drain.)
 379   1               // B3 (Port 2 Bit 3 Output Mode) = PUSH_PULL (P2.3 output is push-pull.)
 380   1               // B4 (Port 2 Bit 4 Output Mode) = OPEN_DRAIN (P2.4 output is open-
 381   1               //     drain.)
 382   1               // B5 (Port 2 Bit 5 Output Mode) = OPEN_DRAIN (P2.5 output is open-
 383   1               //     drain.)
 384   1               // B6 (Port 2 Bit 6 Output Mode) = OPEN_DRAIN (P2.6 output is open-
 385   1               //     drain.)
 386   1               */
 387   1              P2MDOUT = P2MDOUT_B0__PUSH_PULL | P2MDOUT_B1__OPEN_DRAIN
 388   1                              | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__PUSH_PULL
 389   1                              | P2MDOUT_B4__OPEN_DRAIN | P2MDOUT_B5__OPEN_DRAIN
 390   1                              | P2MDOUT_B6__OPEN_DRAIN;
 391   1              // [P2MDOUT - Port 2 Output Mode]$
 392   1      
 393   1              // $[P2MDIN - Port 2 Input Mode]
 394   1              // [P2MDIN - Port 2 Input Mode]$
 395   1      
 396   1              // $[P2SKIP - Port 2 Skip]
 397   1              /*
 398   1               // B0 (Port 2 Bit 0 Skip) = SKIPPED (P2.0 pin is skipped by the
 399   1               //     crossbar.)
 400   1               // B1 (Port 2 Bit 1 Skip) = NOT_SKIPPED (P2.1 pin is not skipped by the
 401   1               //     crossbar.)
 402   1               // B2 (Port 2 Bit 2 Skip) = NOT_SKIPPED (P2.2 pin is not skipped by the
 403   1               //     crossbar.)
 404   1               // B3 (Port 2 Bit 3 Skip) = SKIPPED (P2.3 pin is skipped by the
 405   1               //     crossbar.)
 406   1               */
 407   1              SFRPAGE = 0x20;
 408   1              P2SKIP = P2SKIP_B0__SKIPPED | P2SKIP_B1__NOT_SKIPPED
 409   1                              | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__SKIPPED;
 410   1              // [P2SKIP - Port 2 Skip]$
 411   1      
 412   1              // $[P2MASK - Port 2 Mask]
 413   1              // [P2MASK - Port 2 Mask]$
 414   1      
 415   1              // $[P2MAT - Port 2 Match]
 416   1              // [P2MAT - Port 2 Match]$
 417   1      
 418   1      }
 419          
 420          //================================================================================
 421          // PBCFG_0_enter_DefaultMode_from_RESET
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 8   

 422          //================================================================================
 423          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 424   1              // $[XBR2 - Port I/O Crossbar 2]
 425   1              /*
 426   1               // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 427   1               //     Pullups enabled (except for Ports whose I/O are configured for analog
 428   1               //     mode).)
 429   1               // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 430   1               // URT1E (UART1 I/O Enable) = DISABLED (UART1 I/O unavailable at Port
 431   1               //     pin.)
 432   1               // URT1RTSE (UART1 RTS Output Enable) = DISABLED (UART1 RTS1 unavailable
 433   1               //     at Port pin.)
 434   1               // URT1CTSE (UART1 CTS Input Enable) = DISABLED (UART1 CTS1 unavailable
 435   1               //     at Port pin.)
 436   1               */
 437   1              SFRPAGE = 0x00;
 438   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 439   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 440   1                              | XBR2_URT1CTSE__DISABLED;
 441   1              // [XBR2 - Port I/O Crossbar 2]$
 442   1      
 443   1              // $[PRTDRV - Port Drive Strength]
 444   1              // [PRTDRV - Port Drive Strength]$
 445   1      
 446   1              // $[XBR0 - Port I/O Crossbar 0]
 447   1              /*
 448   1               // URT0E (UART0 I/O Enable) = ENABLED (UART0 TX0, RX0 routed to Port pins
 449   1               //     P0.4 and P0.5.)
 450   1               // SPI0E (SPI I/O Enable) = DISABLED (SPI I/O unavailable at Port pins.)
 451   1               // SMB0E (SMB0 I/O Enable) = DISABLED (SMBus 0 I/O unavailable at Port
 452   1               //     pins.)
 453   1               // CP0E (Comparator0 Output Enable) = DISABLED (CP0 unavailable at Port
 454   1               //     pin.)
 455   1               // CP0AE (Comparator0 Asynchronous Output Enable) = DISABLED
 456   1               //     (Asynchronous CP0 unavailable at Port pin.)
 457   1               // CP1E (Comparator1 Output Enable) = DISABLED (CP1 unavailable at Port
 458   1               //     pin.)
 459   1               // CP1AE (Comparator1 Asynchronous Output Enable) = DISABLED
 460   1               //     (Asynchronous CP1 unavailable at Port pin.)
 461   1               // SYSCKE (SYSCLK Output Enable) = DISABLED (SYSCLK unavailable at Port
 462   1               //     pin.)
 463   1               */
 464   1              XBR0 = XBR0_URT0E__ENABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__DISABLED
 465   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 466   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 467   1              // [XBR0 - Port I/O Crossbar 0]$
 468   1      
 469   1              // $[XBR1 - Port I/O Crossbar 1]
 470   1              // [XBR1 - Port I/O Crossbar 1]$
 471   1      
 472   1      }
 473          
 474          //================================================================================
 475          // CLOCK_0_enter_DefaultMode_from_RESET
 476          //================================================================================
 477          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 478   1              // $[HFOSC1 Setup]
 479   1              // [HFOSC1 Setup]$
 480   1      
 481   1              // $[CLKSEL - Clock Select]
 482   1              /*
 483   1               // CLKSL (Clock Source Select) = HFOSC0 (Clock derived from the Internal
 484   1               //     High Frequency Oscillator 0.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 9   

 485   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 486   1               //     selected clock source divided by 1.)
 487   1               // CLKSL (Clock Source Select) = HFOSC0 (Clock derived from the Internal
 488   1               //     High Frequency Oscillator 0.)
 489   1               // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 490   1               //     selected clock source divided by 1.)
 491   1               */
 492   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 493   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 494   1              while (CLKSEL & CLKSEL_DIVRDY__BMASK == CLKSEL_DIVRDY__NOT_READY)
 495   1                      ;
 496   1              // [CLKSEL - Clock Select]$
 497   1      
 498   1      }
 499          
 500          //================================================================================
 501          // TIMER01_0_enter_DefaultMode_from_RESET
 502          //================================================================================
 503          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 504   1              // $[Timer Initialization]
 505   1              //Save Timer Configuration
 506   1              uint8_t TCON_save;
 507   1              TCON_save = TCON;
 508   1              //Stop Timers
 509   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 510   1      
 511   1              // [Timer Initialization]$
 512   1      
 513   1              // $[TH0 - Timer 0 High Byte]
 514   1              // [TH0 - Timer 0 High Byte]$
 515   1      
 516   1              // $[TL0 - Timer 0 Low Byte]
 517   1              // [TL0 - Timer 0 Low Byte]$
 518   1      
 519   1              // $[TH1 - Timer 1 High Byte]
 520   1              /*
 521   1               // TH1 (Timer 1 High Byte) = 0x96
 522   1               */
 523   1              TH1 = (0x96 << TH1_TH1__SHIFT);
 524   1              // [TH1 - Timer 1 High Byte]$
 525   1      
 526   1              // $[TL1 - Timer 1 Low Byte]
 527   1              // [TL1 - Timer 1 Low Byte]$
 528   1      
 529   1              // $[Timer Restoration]
 530   1              //Restore Timer Configuration
 531   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 532   1      
 533   1              // [Timer Restoration]$
 534   1      
 535   1      }
 536          
 537          //================================================================================
 538          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 539          //================================================================================
 540          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 541   1              // $[CKCON0 - Clock Control 0]
 542   1              /*
 543   1               // SCA (Timer 0/1 Prescale) = SYSCLK_DIV_12 (System clock divided by 12.)
 544   1               // T0M (Timer 0 Clock Select) = PRESCALE (Counter/Timer 0 uses the clock
 545   1               //     defined by the prescale field, SCA.)
 546   1               // T2MH (Timer 2 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 high
 547   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 10  

 548   1               // T2ML (Timer 2 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 low
 549   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 550   1               // T3MH (Timer 3 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 high
 551   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 552   1               // T3ML (Timer 3 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 low
 553   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 554   1               // T1M (Timer 1 Clock Select) = SYSCLK (Timer 1 uses the system clock.)
 555   1               */
 556   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
 557   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 558   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 559   1                              | CKCON0_T1M__SYSCLK;
 560   1              // [CKCON0 - Clock Control 0]$
 561   1      
 562   1              // $[CKCON1 - Clock Control 1]
 563   1              // [CKCON1 - Clock Control 1]$
 564   1      
 565   1              // $[TMOD - Timer 0/1 Mode]
 566   1              /*
 567   1               // T0M (Timer 0 Mode Select) = MODE0 (Mode 0, 13-bit Counter/Timer)
 568   1               // T1M (Timer 1 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 569   1               //     Auto-Reload)
 570   1               // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 571   1               //     on the clock defined by T0M in the CKCON0 register.)
 572   1               // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 573   1               //     irrespective of INT0 logic level.)
 574   1               // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
 575   1               //     on the clock defined by T1M in the CKCON0 register.)
 576   1               // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 577   1               //     irrespective of INT1 logic level.)
 578   1               */
 579   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 580   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 581   1              // [TMOD - Timer 0/1 Mode]$
 582   1      
 583   1              // $[TCON - Timer 0/1 Control]
 584   1              /*
 585   1               // TR1 (Timer 1 Run Control) = RUN (Start Timer 1 running.)
 586   1               */
 587   1              TCON |= TCON_TR1__RUN;
 588   1              // [TCON - Timer 0/1 Control]$
 589   1      
 590   1      }
 591          
 592          //================================================================================
 593          // UART_0_enter_DefaultMode_from_RESET
 594          //================================================================================
 595          extern void UART_0_enter_DefaultMode_from_RESET(void) {
 596   1              // $[SCON0 - UART0 Serial Port Control]
 597   1              /*
 598   1               // REN (Receive Enable) = RECEIVE_ENABLED (UART0 reception enabled.)
 599   1               */
 600   1              SCON0 |= SCON0_REN__RECEIVE_ENABLED;
 601   1              // [SCON0 - UART0 Serial Port Control]$
 602   1      
 603   1      }
 604          
 605          
 606          
 607          
 608          
 609          //================================================================================
 610          // PORTS_3_enter_DefaultMode_from_RESET
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 11  

 611          //================================================================================
 612          extern void PORTS_3_enter_DefaultMode_from_RESET(void) {
 613   1              // $[P3 - Port 3 Pin Latch]
 614   1              // [P3 - Port 3 Pin Latch]$
 615   1      
 616   1              // $[P3MDOUT - Port 3 Output Mode]
 617   1              // [P3MDOUT - Port 3 Output Mode]$
 618   1      
 619   1              // $[P3MDIN - Port 3 Input Mode]
 620   1              /*
 621   1               // B0 (Port 3 Bit 0 Input Mode) = ANALOG (P3.0 pin is configured for
 622   1               //     analog mode.)
 623   1               // B1 (Port 3 Bit 1 Input Mode) = ANALOG (P3.1 pin is configured for
 624   1               //     analog mode.)
 625   1               // B2 (Port 3 Bit 2 Input Mode) = DIGITAL (P3.2 pin is configured for
 626   1               //     digital mode.)
 627   1               // B3 (Port 3 Bit 3 Input Mode) = DIGITAL (P3.3 pin is configured for
 628   1               //     digital mode.)
 629   1               // B4 (Port 3 Bit 4 Input Mode) = DIGITAL (P3.4 pin is configured for
 630   1               //     digital mode.)
 631   1               // B7 (Port 3 Bit 7 Input Mode) = DIGITAL (P3.7 pin is configured for
 632   1               //     digital mode.)
 633   1               */
 634   1              P3MDIN = P3MDIN_B0__ANALOG | P3MDIN_B1__ANALOG | P3MDIN_B2__DIGITAL
 635   1                              | P3MDIN_B3__DIGITAL | P3MDIN_B4__DIGITAL | P3MDIN_B7__DIGITAL;
 636   1              // [P3MDIN - Port 3 Input Mode]$
 637   1      
 638   1      }
 639          
 640          
 641          
 642          //================================================================================
 643          // ADC_0_enter_DefaultMode_from_RESET
 644          //================================================================================
 645          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 646   1              // $[ADC0CN2 - ADC0 Control 2]
 647   1              // [ADC0CN2 - ADC0 Control 2]$
 648   1      
 649   1              // $[ADC0CN1 - ADC0 Control 1]
 650   1              /*
 651   1               // ADBITS (Resolution Control) = 10_BIT (ADC0 operates in 10-bit mode.)
 652   1               // ADSJST (Accumulator Shift and Justify) = RIGHT_NO_SHIFT (Right
 653   1               //     justified. No shifting applied.)
 654   1               // ADRPT (Repeat Count) = ACC_1 (Perform and Accumulate 1 conversion.)
 655   1               */
 656   1              ADC0CN1 = ADC0CN1_ADBITS__10_BIT | ADC0CN1_ADSJST__RIGHT_NO_SHIFT
 657   1                              | ADC0CN1_ADRPT__ACC_1;
 658   1              // [ADC0CN1 - ADC0 Control 1]$
 659   1      
 660   1              // $[ADC0MX - ADC0 Multiplexer Selection]
 661   1              /*
 662   1               // ADC0MX (AMUX0 Positive Input Selection) = ADC0P13 (Select ADC0.13.)
 663   1               */
 664   1              ADC0MX = ADC0MX_ADC0MX__ADC0P13;
 665   1              // [ADC0MX - ADC0 Multiplexer Selection]$
 666   1      
 667   1              // $[ADC0CF2 - ADC0 Power Control]
 668   1              /*
 669   1               // GNDSL (Analog Ground Reference) = GND_PIN (The ADC0 ground reference
 670   1               //     is the GND pin.)
 671   1               // REFSL (Voltage Reference Select) = VDD_PIN (The ADC0 voltage reference
 672   1               //     is the VDD pin.)
 673   1               // ADPWR (Power Up Delay Time) = 0x1F
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 12  

 674   1               */
 675   1              ADC0CF2 = ADC0CF2_GNDSL__GND_PIN | ADC0CF2_REFSL__VDD_PIN
 676   1                              | (0x1F << ADC0CF2_ADPWR__SHIFT);
 677   1              // [ADC0CF2 - ADC0 Power Control]$
 678   1      
 679   1              // $[ADC0CF0 - ADC0 Configuration]
 680   1              /*
 681   1               // ADCLKSEL (ADC Clock Select) = SYSCLK (ADCCLK = SYSCLK.)
 682   1               // ADSC (SAR Clock Divider) = 0x01
 683   1               */
 684   1              ADC0CF0 = ADC0CF0_ADCLKSEL__SYSCLK | (0x01 << ADC0CF0_ADSC__SHIFT);
 685   1              // [ADC0CF0 - ADC0 Configuration]$
 686   1      
 687   1              // $[ADC0CF1 - ADC0 Configuration]
 688   1              /*
 689   1               // ADLPM (Low Power Mode Enable) = LP_DISABLED (Disable low power
 690   1               //     mode.)
 691   1               // ADTK (Conversion Tracking Time) = 0x01
 692   1               */
 693   1              ADC0CF1 = ADC0CF1_ADLPM__LP_DISABLED | (0x01 << ADC0CF1_ADTK__SHIFT);
 694   1              // [ADC0CF1 - ADC0 Configuration]$
 695   1      
 696   1              // $[ADC0ASAL - ADC0 Autoscan Start Address Low Byte]
 697   1              // [ADC0ASAL - ADC0 Autoscan Start Address Low Byte]$
 698   1      
 699   1              // $[ADC0GTH - ADC0 Greater-Than High Byte]
 700   1              // [ADC0GTH - ADC0 Greater-Than High Byte]$
 701   1      
 702   1              // $[ADC0GTL - ADC0 Greater-Than Low Byte]
 703   1              // [ADC0GTL - ADC0 Greater-Than Low Byte]$
 704   1      
 705   1              // $[ADC0LTH - ADC0 Less-Than High Byte]
 706   1              // [ADC0LTH - ADC0 Less-Than High Byte]$
 707   1      
 708   1              // $[ADC0LTL - ADC0 Less-Than Low Byte]
 709   1              // [ADC0LTL - ADC0 Less-Than Low Byte]$
 710   1      
 711   1              // $[ADC0ASCF - ADC0 Autoscan Configuration]
 712   1              // [ADC0ASCF - ADC0 Autoscan Configuration]$
 713   1      
 714   1              // $[ADC0CN0 - ADC0 Control 0]
 715   1              /*
 716   1               // ADEN (ADC Enable) = ENABLED (Enable ADC0 (active and ready for data
 717   1               //     conversions).)
 718   1               */
 719   1              ADC0CN0 |= ADC0CN0_ADEN__ENABLED;
 720   1              // [ADC0CN0 - ADC0 Control 0]$
 721   1      
 722   1      }
 723          
 724          //================================================================================
 725          // DAC_0_enter_DefaultMode_from_RESET
 726          //================================================================================
 727          extern void DAC_0_enter_DefaultMode_from_RESET(void) {
 728   1              // $[DAC0CF0 - DAC0 Configuration 0]
 729   1              /*
 730   1               // EN (DAC0 Enable) = ENABLE (DAC0 is enabled and will drive the output
 731   1               //     pin.)
 732   1               // UPDATE (DAC0 Update Trigger Source) = TIMER4 (DAC0 output updates
 733   1               //     occur on Timer 4 high byte overflow.)
 734   1               // LJST (DAC0 Left Justify Enable) = RIGHT_JUSTIFY (DAC0 input is treated
 735   1               //     as right-justified.)
 736   1               // RSTMD (DAC0 Reset Mode) = NORMAL (All resets will reset DAC0 and its
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 13  

 737   1               //     associated registers.)
 738   1               */
 739   1              SFRPAGE = 0x30;
 740   1              DAC0CF0 = DAC0CF0_EN__ENABLE | DAC0CF0_UPDATE__TIMER4
 741   1                              | DAC0CF0_LJST__RIGHT_JUSTIFY | DAC0CF0_RSTMD__NORMAL;
 742   1              // [DAC0CF0 - DAC0 Configuration 0]$
 743   1      
 744   1              // $[DAC0CF1 - DAC0 Configuration 1]
 745   1              // [DAC0CF1 - DAC0 Configuration 1]$
 746   1      
 747   1      }
 748          
 749          //================================================================================
 750          // DAC_1_enter_DefaultMode_from_RESET
 751          //================================================================================
 752          extern void DAC_1_enter_DefaultMode_from_RESET(void) {
 753   1              // $[DAC1CF0 - DAC1 Configuration 0]
 754   1              /*
 755   1               // EN (DAC1 Enable) = ENABLE (DAC1 is enabled and will drive the output
 756   1               //     pin.)
 757   1               // UPDATE (DAC1 Update Trigger Source) = TIMER4 (DAC1 output updates
 758   1               //     occur on Timer 4 high byte overflow.)
 759   1               // LJST (DAC1 Left Justify Enable) = RIGHT_JUSTIFY (DAC1 input is treated
 760   1               //     as right-justified.)
 761   1               // RSTMD (DAC1 Reset Mode) = NORMAL (All resets will reset DAC1 and its
 762   1               //     associated registers.)
 763   1               */
 764   1              DAC1CF0 = DAC1CF0_EN__ENABLE | DAC1CF0_UPDATE__TIMER4
 765   1                              | DAC1CF0_LJST__RIGHT_JUSTIFY | DAC1CF0_RSTMD__NORMAL;
 766   1              // [DAC1CF0 - DAC1 Configuration 0]$
 767   1      
 768   1              // $[DAC1CF1 - DAC1 Configuration 1]
 769   1              // [DAC1CF1 - DAC1 Configuration 1]$
 770   1      
 771   1      }
 772          
 773          //================================================================================
 774          // DACGCF_0_enter_DefaultMode_from_RESET
 775          //================================================================================
 776          extern void DACGCF_0_enter_DefaultMode_from_RESET(void) {
 777   1              // $[DACGCF0 - DAC Global Configuration 0]
 778   1              /*
 779   1               // D01REFSL (DAC0 and DAC1 Reference Voltage Select) = VREF (Select the
 780   1               //     VREF pin.)
 781   1               // D1SRC (DAC1 Data Source) = DAC1 (Input = DAC1H:DAC1L.)
 782   1               // D1AMEN (DAC1 Alternating Mode Enable) = NORMAL (DAC1 always updates
 783   1               //     from the data source selected in D1SRC. This mode may be used with any
 784   1               //     trigger source.)
 785   1               */
 786   1              DACGCF0 = DACGCF0_D01REFSL__VREF | DACGCF0_D1SRC__DAC1
 787   1                              | DACGCF0_D1AMEN__NORMAL;
 788   1              // [DACGCF0 - DAC Global Configuration 0]$
 789   1      
 790   1              // $[DACGCF2 - DAC Global Configuration 2]
 791   1              // [DACGCF2 - DAC Global Configuration 2]$
 792   1      
 793   1      }
 794          
 795          //================================================================================
 796          // VREF_0_enter_DefaultMode_from_RESET
 797          //================================================================================
 798          extern void VREF_0_enter_DefaultMode_from_RESET(void) {
 799   1              // $[REF0CN - Voltage Reference Control]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 14  

 800   1              /*
 801   1               // VREFSL (Voltage Reference Output Select) = VREF_2P4 (2.4 V reference
 802   1               //     output to VREF pin.)
 803   1               */
 804   1              SFRPAGE = 0x00;
 805   1              REF0CN = REF0CN_VREFSL__VREF_2P4;
 806   1              // [REF0CN - Voltage Reference Control]$
 807   1      
 808   1      }
 809          
 810          
 811          
 812          //================================================================================
 813          // TIMER01_0_enter_DefaultMode_from_RESET
 814          //================================================================================
 815          
 816          
 817          //================================================================================
 818          // TIMER16_3_enter_DefaultMode_from_RESET
 819          //================================================================================
 820          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 821   1              // $[Timer Initialization]
 822   1              // Save Timer Configuration
 823   1              uint8_t TMR3CN0_TR3_save;
 824   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 825   1              // Stop Timer
 826   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 827   1              // [Timer Initialization]$
 828   1      
 829   1              // $[TMR3CN1 - Timer 3 Control 1]
 830   1              // [TMR3CN1 - Timer 3 Control 1]$
 831   1      
 832   1              // $[TMR3CN0 - Timer 3 Control]
 833   1              // [TMR3CN0 - Timer 3 Control]$
 834   1      
 835   1              // $[TMR3H - Timer 3 High Byte]
 836   1              /*
 837   1               // TMR3H (Timer 3 High Byte) = 0xF8
 838   1               */
 839   1              TMR3H = (0xF8 << TMR3H_TMR3H__SHIFT);
 840   1              // [TMR3H - Timer 3 High Byte]$
 841   1      
 842   1              // $[TMR3L - Timer 3 Low Byte]
 843   1              /*
 844   1               // TMR3L (Timer 3 Low Byte) = 0x06
 845   1               */
 846   1              TMR3L = (0x06 << TMR3L_TMR3L__SHIFT);
 847   1              // [TMR3L - Timer 3 Low Byte]$
 848   1      
 849   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 850   1              /*
 851   1               // TMR3RLH (Timer 3 Reload High Byte) = 0xF8
 852   1               */
 853   1              TMR3RLH = (0xF8 << TMR3RLH_TMR3RLH__SHIFT);
 854   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 855   1      
 856   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 857   1              /*
 858   1               // TMR3RLL (Timer 3 Reload Low Byte) = 0x06
 859   1               */
 860   1              TMR3RLL = (0x06 << TMR3RLL_TMR3RLL__SHIFT);
 861   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 862   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 15  

 863   1              // $[TMR3CN0]
 864   1              /*
 865   1               // TR3 (Timer 3 Run Control) = RUN (Start Timer 3 running.)
 866   1               */
 867   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 868   1              // [TMR3CN0]$
 869   1      
 870   1              // $[Timer Restoration]
 871   1              // Restore Timer Configuration
 872   1              TMR3CN0 |= TMR3CN0_TR3_save;
 873   1              // [Timer Restoration]$
 874   1      
 875   1      }
 876          
 877          //================================================================================
 878          // TIMER16_4_enter_DefaultMode_from_RESET
 879          //================================================================================
 880          extern void TIMER16_4_enter_DefaultMode_from_RESET(void) {
 881   1              // $[Timer Initialization]
 882   1              // Save Timer Configuration
 883   1              uint8_t TMR4CN0_TR4_save;
 884   1              SFRPAGE = 0x10;
 885   1              TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 886   1              // Stop Timer
 887   1              TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 888   1              // [Timer Initialization]$
 889   1      
 890   1              // $[TMR4CN1 - Timer 4 Control 1]
 891   1              // [TMR4CN1 - Timer 4 Control 1]$
 892   1      
 893   1              // $[TMR4CN0 - Timer 4 Control]
 894   1              // [TMR4CN0 - Timer 4 Control]$
 895   1      
 896   1              // $[TMR4H - Timer 4 High Byte]
 897   1              /*
 898   1               // TMR4H (Timer 4 High Byte) = 0xFF
 899   1               */
 900   1              TMR4H = (0xFF << TMR4H_TMR4H__SHIFT);
 901   1              // [TMR4H - Timer 4 High Byte]$
 902   1      
 903   1              // $[TMR4L - Timer 4 Low Byte]
 904   1              /*
 905   1               // TMR4L (Timer 4 Low Byte) = 0xFF
 906   1               */
 907   1              TMR4L = (0xFF << TMR4L_TMR4L__SHIFT);
 908   1              // [TMR4L - Timer 4 Low Byte]$
 909   1      
 910   1              // $[TMR4RLH - Timer 4 Reload High Byte]
 911   1              /*
 912   1               // TMR4RLH (Timer 4 Reload High Byte) = 0xFF
 913   1               */
 914   1              TMR4RLH = (0xFE << TMR4RLH_TMR4RLH__SHIFT);
 915   1              // [TMR4RLH - Timer 4 Reload High Byte]$
 916   1      
 917   1              // $[TMR4RLL - Timer 4 Reload Low Byte]
 918   1              /*
 919   1               // TMR4RLL (Timer 4 Reload Low Byte) = 0x5D
 920   1               */
 921   1              TMR4RLL = (0x68 << TMR4RLL_TMR4RLL__SHIFT);
 922   1              // [TMR4RLL - Timer 4 Reload Low Byte]$
 923   1      
 924   1        TMR4RL = (uint16_t)(-SYSCLK / SAMPLE_RATE_DAC);
 925   1              // $[TMR4CN0]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 16  

 926   1              /*
 927   1               // TR4 (Timer 4 Run Control) = RUN (Start Timer 4 running.)
 928   1               */
 929   1              TMR4CN0 |= TMR4CN0_TR4__RUN;
 930   1              // [TMR4CN0]$
 931   1      
 932   1              // $[Timer Restoration]
 933   1              // Restore Timer Configuration
 934   1              TMR4CN0 |= TMR4CN0_TR4_save;
 935   1              // [Timer Restoration]$
 936   1      
 937   1      }
 938          
 939          
 940          
 941          //================================================================================
 942          // SPI_0_enter_DefaultMode_from_RESET
 943          //================================================================================
 944          extern void SPI_0_enter_DefaultMode_from_RESET(void) {
 945   1              // $[SPI0CKR - SPI0 Clock Rate]
 946   1              /*
 947   1               // SPI0CKR (SPI0 Clock Rate) = 0x0B
 948   1               */
 949   1              SPI0CKR = (0x0B << SPI0CKR_SPI0CKR__SHIFT);
 950   1              // [SPI0CKR - SPI0 Clock Rate]$
 951   1      
 952   1              // $[SPI0CFG - SPI0 Configuration]
 953   1              /*
 954   1               // MSTEN (Master Mode Enable) = MASTER_ENABLED (Enable master mode.
 955   1               //     Operate as a master.)
 956   1               */
 957   1              SPI0CFG |= SPI0CFG_MSTEN__MASTER_ENABLED;
 958   1              // [SPI0CFG - SPI0 Configuration]$
 959   1      
 960   1              // $[SPI0PCF - SPI0 Pin Configuration]
 961   1              // [SPI0PCF - SPI0 Pin Configuration]$
 962   1      
 963   1              // $[SPI0CN0 - SPI0 Control]
 964   1              /*
 965   1               // SPIEN (SPI0 Enable) = ENABLED (Enable the SPI module.)
 966   1               // NSSMD (Slave Select Mode) = 3_WIRE (3-Wire Slave or 3-Wire Master
 967   1               //     Mode. NSS signal is not routed to a port pin.)
 968   1               */
 969   1              SPI0CN0 &= ~SPI0CN0_NSSMD__FMASK;
 970   1              SPI0CN0 |= SPI0CN0_SPIEN__ENABLED;
 971   1              // [SPI0CN0 - SPI0 Control]$
 972   1      
 973   1      }
 974          
 975          //================================================================================
 976          // INTERRUPT_0_enter_DefaultMode_from_RESET
 977          //================================================================================
 978          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 979   1              // $[EIE1 - Extended Interrupt Enable 1]
 980   1              /*
 981   1               // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 982   1               //     ADC0 Conversion Complete interrupt.)
 983   1               // EWADC0 (ADC0 Window Comparison Interrupt Enable) = DISABLED (Disable
 984   1               //     ADC0 Window Comparison interrupt.)
 985   1               // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
 986   1               //     interrupts.)
 987   1               // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 988   1               //     interrupts.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 17  

 989   1               // EMAT (Port Match Interrupts Enable) = ENABLED (Enable interrupt
 990   1               //     requests generated by a Port Match.)
 991   1               // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = DISABLED
 992   1               //     (Disable all PCA0 interrupts.)
 993   1               // ESMB0 (SMBus (SMB0) Interrupt Enable) = DISABLED (Disable all SMB0
 994   1               //     interrupts.)
 995   1               // ET3 (Timer 3 Interrupt Enable) = ENABLED (Enable interrupt requests
 996   1               //     generated by the TF3L or TF3H flags.)
 997   1               */
 998   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 999   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__ENABLED | EIE1_EPCA0__DISABLED
1000   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED;
1001   1              // [EIE1 - Extended Interrupt Enable 1]$
1002   1      
1003   1              // $[EIE2 - Extended Interrupt Enable 2]
1004   1              /*
1005   1               // CL0 (Configurable Logic (CL0) Interrupt Enable) = DISABLED (Disable
1006   1               //     CL0 interrupts.)
1007   1               // EI2C0 (I2C0 Slave Interrupt Enable) = DISABLED (Disable all I2C0 slave
1008   1               //     interrupts.)
1009   1               // ET4 (Timer 4 Interrupt Enable) = ENABLED (Enable interrupt requests
1010   1               //     generated by the TF4L or TF4H flags.)
1011   1               // ET5 (Timer 5 Interrupt Enable) = DISABLED (Disable Timer 5
1012   1               //     interrupts.)
1013   1               // ES1 (UART1 Interrupt Enable) = DISABLED (Disable UART1 interrupts.)
1014   1               */
1015   1              EIE2 = EIE2_CL0__DISABLED | EIE2_EI2C0__DISABLED | EIE2_ET4__ENABLED
1016   1                              | EIE2_ET5__DISABLED | EIE2_ES1__DISABLED;
1017   1              // [EIE2 - Extended Interrupt Enable 2]$
1018   1      
1019   1              // $[EIP1H - Extended Interrupt Priority 1 High]
1020   1              /*
1021   1               // PHADC0 (ADC0 Conversion Complete Interrupt Priority Control MSB) = LOW
1022   1               //     (ADC0 Conversion Complete interrupt priority MSB set to low.)
1023   1               // PHWADC0 (ADC0 Window Comparator Interrupt Priority Control MSB) = LOW
1024   1               //     (ADC0 Window interrupt priority MSB set to low.)
1025   1               // PHCP0 (Comparator0 (CP0) Interrupt Priority Control MSB) = LOW (CP0
1026   1               //     interrupt priority MSB set to low.)
1027   1               // PHCP1 (Comparator1 (CP1) Interrupt Priority Control MSB) = LOW (CP1
1028   1               //     interrupt priority MSB set to low.)
1029   1               // PHMAT (Port Match Interrupt Priority Control MSB) = HIGH (Port Match
1030   1               //     interrupt priority MSB set to high.)
1031   1               // PHPCA0 (Programmable Counter Array (PCA0) Interrupt Priority Control
1032   1               //     MSB) = LOW (PCA0 interrupt priority MSB set to low.)
1033   1               // PHSMB0 (SMBus (SMB0) Interrupt Priority Control MSB) = LOW (SMB0
1034   1               //     interrupt priority MSB set to low.)
1035   1               // PHT3 (Timer 3 Interrupt Priority Control MSB) = HIGH (Timer 3
1036   1               //     interrupt priority MSB set to high.)
1037   1               */
1038   1              SFRPAGE = 0x10;
1039   1              EIP1H = EIP1H_PHADC0__LOW | EIP1H_PHWADC0__LOW | EIP1H_PHCP0__LOW
1040   1                              | EIP1H_PHCP1__LOW | EIP1H_PHMAT__HIGH | EIP1H_PHPCA0__LOW
1041   1                              | EIP1H_PHSMB0__LOW | EIP1H_PHT3__HIGH;
1042   1              // [EIP1H - Extended Interrupt Priority 1 High]$
1043   1      
1044   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
1045   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
1046   1      
1047   1              // $[EIP2 - Extended Interrupt Priority 2]
1048   1              /*
1049   1               // PCL0 (Configurable Logic (CL0) Interrupt Priority Control LSB) = LOW
1050   1               //     (CL0 interrupt priority LSB set to low.)
1051   1               // PI2C0 (I2C0 Slave Interrupt Priority Control LSB) = LOW (I2C0 Slave
C51 COMPILER V9.53.0.0   INITDEVICE                                                        05/06/2017 22:33:58 PAGE 18  

1052   1               //     interrupt priority LSB set to low.)
1053   1               // PT4 (Timer 4 Interrupt Priority Control LSB) = HIGH (Timer 4 interrupt
1054   1               //     priority LSB set to high.)
1055   1               // PT5 (Timer 5 Interrupt Priority Control LSB) = LOW (Timer 5 interrupt
1056   1               //     priority LSB set to low.)
1057   1               // PS1 (UART1 Interrupt Priority Control LSB) = LOW (UART1 interrupt
1058   1               //     priority LSB set to low.)
1059   1               */
1060   1              EIP2 = EIP2_PCL0__LOW | EIP2_PI2C0__LOW | EIP2_PT4__HIGH | EIP2_PT5__LOW
1061   1                              | EIP2_PS1__LOW;
1062   1              // [EIP2 - Extended Interrupt Priority 2]$
1063   1      
1064   1              // $[EIP2H - Extended Interrupt Priority 2 High]
1065   1              // [EIP2H - Extended Interrupt Priority 2 High]$
1066   1      
1067   1              // $[IE - Interrupt Enable]
1068   1              /*
1069   1               // EA (All Interrupts Enable) = DISABLED (Disable all interrupt sources.)
1070   1               // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
1071   1               //     interrupt 0.)
1072   1               // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
1073   1               //     interrupt 1.)
1074   1               // ESPI0 (SPI0 Interrupt Enable) = ENABLED (Enable interrupt requests
1075   1               //     generated by SPI0.)
1076   1               // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
1077   1               //     interrupt.)
1078   1               // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
1079   1               //     interrupt.)
1080   1               // ET2 (Timer 2 Interrupt Enable) = ENABLED (Enable interrupt requests
1081   1               //     generated by the TF2L or TF2H flags.)
1082   1               // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
1083   1               */
1084   1              SFRPAGE = 0x00;
1085   1              IE = IE_EA__DISABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
1086   1                              | IE_ESPI0__ENABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
1087   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
1088   1              // [IE - Interrupt Enable]$
1089   1      
1090   1              // $[IP - Interrupt Priority]
1091   1              // [IP - Interrupt Priority]$
1092   1      
1093   1              // $[IPH - Interrupt Priority High]
1094   1              // [IPH - Interrupt Priority High]$
1095   1      
1096   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    314    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
